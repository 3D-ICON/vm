#include "commandmap.h"
#include "value.h"
#include "cmd.h"
#include "virtualmachine.h"

using namespace sqf;
void sqf::commandmap::initunimplemented(void)
{
	add(binary(4, L"lnbsetcurselrow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcurselrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemenuitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"curatorcoef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getreldir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getreldir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menucollapse", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menucollapse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth6", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth6)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"configclasses", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (configclasses)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findemptyposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (findemptyposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointtype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointtype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordistance", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say3d", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (say3d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceflagtexture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceflagtexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addvehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablereload", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablereload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotlight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpilotlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvisibleiftreecollapsed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvisibleiftreecollapsed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeall", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isequaltypeall)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camconstuctionsetparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camconstuctionsetparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandsuppressivefire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandsuppressivefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvtext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchlight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsettarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsettarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setanimspeedcoef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setanimspeedcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposaslw", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposaslw)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfocus", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetfocus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkershapelocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkershapelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontp", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontp)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfont", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfont)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowgetin", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowgetin)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth4b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth4b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskdescription", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletaskdescription)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendtaskresult", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sendtaskresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"directsay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (directsay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetforegroundcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetforegroundcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setforcegeneratorrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setforcegeneratorrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"worldtomodel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (worldtomodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethitindex", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethitindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hideobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"get3denattribute", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofollow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dofollow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableconversation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableconversation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetdive", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetdive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetselectcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetselectcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setweaponreloadingtime", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setweaponreloadingtime)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableai", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableai)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remotecontrol", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remotecontrol)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmpeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmpeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"actionparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfromeditor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfromeditor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectweaponturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuurl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuurl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getfriend", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getfriend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteeditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleteeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"registertask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (registertask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"pushbackunique", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (pushbackunique)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizeobjectsadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizeobjectsadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disabletiequipment", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disabletiequipment)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlerandom", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setparticlerandom)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetsquery", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (targetsquery)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselectcolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatepylon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animatepylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableuavwaypoints", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableuavwaypoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distancesqr", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (distancesqr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeaker", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setspeaker)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammoonpylon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setammoonpylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcustomweightrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcustomweightrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isuavconnectable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isuavconnectable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetangle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletasktype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletasktype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerattachobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animationsourcephase", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animationsourcephase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadmagazine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadmagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadstatus", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadstatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removempeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removempeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightbrightness", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightbrightness)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"swimindepth", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (swimindepth)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"attachobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addrating", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addrating)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearobjectsready", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearobjectsready)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"controlsgroupctrl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (controlsgroupctrl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolorshade", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolorshade)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"saveidentity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (saveidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablestamina", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablestamina)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerbrushlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerbrushlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeownedmine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeownedmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitability", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtouniform", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additemtouniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"htmlload", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (htmlload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereceiveremotetargets", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclereceiveremotetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableweapondisassembly", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableweapondisassembly)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasgunner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignasgunner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitrecoilcoefficient", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitrecoilcoefficient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuchecked", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethitpointdamage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethitpointdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allow3dmode", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allow3dmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"limitspeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (limitspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadoverlay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadoverlay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreload", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfrombackpack", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeitemfrombackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectcommit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"updatedrawicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (updatedrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwinddir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwinddir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlremovealleventhandlers", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlremovealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignascargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleid", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicleid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertypelocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkertypelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetrange", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsettext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfog", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfog)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectorup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvectorup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunittrait", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunittrait)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcewalk", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcewalk)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponcargoglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightintensity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightintensity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"customradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (customradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentmagazinedetailturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentmagazinedetailturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settitleeffect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settitleeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsettextright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsettextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfollow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandfollow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowfileoperations", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowfileoperations)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"param", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (param)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolordisabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcurrentwaypoint", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcurrentwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfromuniform", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeitemfromuniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormodeltoworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectormodeltoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightnings", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightnings)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsortbyvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsortbyvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpylonloadout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpylonloadout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeprimaryweaponitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeprimaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selecteditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selecteditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectarguments", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectarguments)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagtexture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setflagtexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfromvest", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeitemfromvest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethitindex", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gethitindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcefollowroad", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcefollowroad)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addplayerscores", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addplayerscores)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatediarysubject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (creatediarysubject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"knowsabout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (knowsabout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"in", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (in)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendtask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sendtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorselectedright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselectedright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablepersonturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablepersonturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointscript", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointscript)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playmove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentweaponturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ammoonpylon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ammoonpylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontpb", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontpb)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockcamerato", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockcamerato)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutfadeout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cutfadeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeallmpeventhandlers", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallmpeventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inpolygon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inpolygon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsettext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denobjecttype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denobjecttype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerdynamicsimulation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerdynamicsimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertextlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkertextlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazinecargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazinecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazinecargoglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazinecargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"minedetectedby", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (minedetectedby)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbtext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isvehiclesensorenabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isvehiclesensorenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetbackgroundcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetbackgroundcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtobackpack", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canadditemtobackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposasl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposasl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"reveal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (reveal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettooltip", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vehicleradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehicleradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"show3dicons", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (show3dicons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetdisabledcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetdisabledcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablevehiclecargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablevehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"get3denmissionattribute", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denmissionattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isflashlighton", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isflashlighton)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execfsm", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (execfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcollisionlight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcollisionlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectordir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvectordir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectmaterialglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectmaterialglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdropinterval", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdropinterval)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolortext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolortext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbtext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchmove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additemcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"neartargets", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (neartargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addgoggles", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addgoggles)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowcuratorlogicignoreareas", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowcuratorlogicignoreareas)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascommander", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignascommander)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showwaypoint", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getdir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettextright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsettextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlremoveeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlremoveeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disablenvgequipment", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disablenvgequipment)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetknowledge", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (targetknowledge)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbdelete", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbdelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefov", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparefov)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"newoverlay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (newoverlay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"respawnvehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (respawnvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfov", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetfov)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutobj", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cutobj)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskalwaysvisible", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletaskalwaysvisible)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretunit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (turretunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbaddtopic", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbaddtopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformationtask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setformationtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparebank", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparebank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcurrenttask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcurrenttask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cbsetchecked", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cbsetchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsort", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setuseractiontext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setuseractiontext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsuppression", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsuppression)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkertext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponsturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponsturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitems", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeitems)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelsetcallsign", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiochannelsetcallsign)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetchecked", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupid", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveto", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvexpand", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvexpand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorworldtomodelvisual", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorworldtomodelvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveinturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveinturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbadddatabase", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbadddatabase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"infopanelcomponentenabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (infopanelcomponentenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"create3denentity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (create3denentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolorselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteresources", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleteresources)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"try", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (try)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ropedetach", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropedetach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablesimulationglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablesimulationglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth1b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth1b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwantedrpmrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwantedrpmrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvcount", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcount)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unregistertask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unregistertask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcreate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camcreate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (say)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetscale", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetscale)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectenable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"intersect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (intersect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removehandgunitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removehandgunitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dofire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"catch", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (catch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denattribute", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdebriefingtext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdebriefingtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfade", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfade)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcgroupparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcgroupparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sideradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sideradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countenemy", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (countenemy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"progresssetposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (progresssetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdammage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdammage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveinany", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveinany)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdeletecolumn", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdeletecolumn)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayaddeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayaddeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltip", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setshotparents", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setshotparents)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldvisual", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (modeltoworldvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setattributes", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setattributes)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getgroupicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvdelete", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvdelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth5b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth5b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableaifeature", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableaifeature)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmenuitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablesimulation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablesimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowdamage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execvm", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (execvm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointhouseposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointhouseposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfriend", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfriend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoreditingarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcuratoreditingarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"attachto", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attachto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutrsc", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cutrsc)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcaptive", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcaptive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"editorseteventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (editorseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelsetlabel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiochannelsetlabel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockedcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockedcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (turretlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupidglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupidglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbtell", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbtell)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setidentity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuenabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"doorphase", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (doorphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lookat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lookat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectleader", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectleader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"backpackspacefor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpackspacefor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatesource", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animatesource)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitloadout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitloadout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoraddons", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removecuratoraddons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playgesture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playgesture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparetarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparetarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetheadertemplate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctsetheadertemplate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereportownposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclereportownposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerdirlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerdirlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animationphase", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animationphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remoteexec", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remoteexec)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeweaponglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createsite", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createsite)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrainbow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrainbow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfatigue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfatigue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdamage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countside", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (countside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctfindrowheader", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctfindrowheader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticleparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setparticleparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawrectangle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawrectangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbaddrow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbaddrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolorselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawline", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawline)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"posscreentoworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (posscreentoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethidebehind", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethidebehind)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretowner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (turretowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setface", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setface)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fadesound", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fadesound)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"splitstring", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (splitstring)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"count", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (count)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointformation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableuavconnectability", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableuavconnectability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearroads", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearroads)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayctrl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayctrl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreach", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (foreach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denmissionattribute", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denmissionattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformdir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setformdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontsecondary", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommitprepared", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camcommitprepared)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setnamesound", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setnamesound)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldvisualworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (modeltoworldvisualworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"doartilleryfire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (doartilleryfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isuniformallowed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isuniformallowed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"skill", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (skill)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatediaryrecord", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (creatediaryrecord)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweapon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"waypointattachvehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointattachvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockwp", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockwp)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineammocargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazineammocargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayseteventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazineglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitposweak", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitposweak)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettextcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addlivestats", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addlivestats)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceadduniform", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceadduniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canvehiclecargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canvehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorworldtomodel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorworldtomodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrandomlip", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrandomlip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwppos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwppos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findeditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (findeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addforce", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addforce)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockedturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockedturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapcursor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapcursor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawlink", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawlink)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratorpoints", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcuratorpoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignasturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendsimplecommand", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sendsimplecommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsort", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoreditingarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removecuratoreditingarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointspeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createunit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdynamicsimulationdistance", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdynamicsimulationdistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorcameraareaceiling", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcuratorcameraareaceiling)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addtorque", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addtorque)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"onmapsingleclick", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onmapsingleclick)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmass", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbadddatabasetargets", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbadddatabasetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"posworldtoscreen", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (posworldtoscreen)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectionposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectionposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"updatemenuitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (updatemenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwindforce", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwindforce)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getfsmvariable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getfsmvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addresources", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addresources)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskcustomdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletaskcustomdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectoradd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectoradd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawpolygon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawpolygon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menushortcut", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menushortcut)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetrelpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetrelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlcreate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlcreate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"useaudiotimeformoves", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (useaudiotimeformoves)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addscore", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addscore)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablevehiclesensor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablevehiclesensor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assigncurator", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assigncurator)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buildingexit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buildingexit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfuel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfuel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectadjust", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectadjust)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"magazineturretammo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazineturretammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nmenuitems", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nmenuitems)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"preloadobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preloadobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodeldirandup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodeldirandup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointcombatmode", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointcombatmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"flyinheightasl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flyinheightasl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatempcampaigndisplay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (creatempcampaigndisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enabledynamicsimulation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enabledynamicsimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposatl", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposatl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdrawicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"globalradio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (globalradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteditormode", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (seteditormode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvtooltip", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvtooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordistancesqr", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordistancesqr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sidechat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sidechat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableuavconnectability", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableuavconnectability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlcommit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearestobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightdaylight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightdaylight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lightattachobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lightattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcenterofmass", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcenterofmass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcsetgroup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcsetgroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkercolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkercolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setairportside", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setairportside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitrank", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitrank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjecttextureglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjecttextureglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getrelpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getrelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletasktarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletasktarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizewaypoint", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizewaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"append", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (append)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdeleterow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdeleterow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"throw", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (throw)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearsupplies", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearsupplies)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"copywaypoints", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (copywaypoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setleader", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setleader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unitsbelowheight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitsbelowheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableai", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableai)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdirection", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"servercommand", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servercommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertimeout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggertimeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbisselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbisselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparedir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparedir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetdata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetdir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposasl2", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setposasl2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetbank", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetbank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"action", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (action)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazineturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectweapon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createtask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addeditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableinfopanelcomponent", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableinfopanelcomponent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"linkitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (linkitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteditorobjectscope", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (seteditorobjectscope)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolordisabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showlegend", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showlegend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectproxy", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectproxy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkersizelocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkersizelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ordergetin", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ordergetin)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctremoverows", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctremoverows)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getunittrait", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getunittrait)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcremovegroup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcremovegroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"arrayintersect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (arrayintersect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusize", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"issensortargetconfirmed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (issensortargetconfirmed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setusermfdvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setusermfdvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getsoundcontroller", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getsoundcontroller)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablemimics", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablemimics)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth2b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth2b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcustomaimcoef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcustomaimcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setairplanethrottle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setairplanethrottle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"find", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (find)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsize", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunitpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatedoor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animatedoor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isequaltypeparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctfindheaderrows", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctfindheaderrows)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gethit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawarrow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawarrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicleposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlshow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlshow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazineglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemagazineglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightflaremaxdistance", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightflaremaxdistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playmovenow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playmovenow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"domove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (domove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcespeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcespeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolordisabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerbrush", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerbrush)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocitytransformation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvelocitytransformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablecollisionwith", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablecollisionwith)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayremoveeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayremoveeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazines", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deletegroupwhenempty", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletegroupwhenempty)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isflatempty", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isflatempty)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetstructuredtext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetstructuredtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addteammember", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addteammember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"revealmine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (revealmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"reportremotetarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (reportremotetarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmusiceffect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmusiceffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchgesture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchgesture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorcos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorcos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandwatch", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandwatch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targets", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (targets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratorcameraarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcuratorcameraarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth6b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth6b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerposlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerposlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcamerarotation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpilotcamerarotation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setautonomous", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setautonomous)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getsoundcontrollerresult", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getsoundcontrollerresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclevarname", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclevarname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hasweapon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hasweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextsecondary", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettextsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicletipars", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicletipars)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagside", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setflagside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrowcontrols", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrowcontrols)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeedmode", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setspeedmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"waypointattachobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinsilent", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (joinsilent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsortbyvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsortbyvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerdir", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkerdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deletevehiclecrew", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletevehiclecrew)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrollrewind", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrollrewind)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buildingpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buildingpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointstatements", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointstatements)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointforcebehaviour", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointforcebehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmimic", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmimic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"engineon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (engineon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwindstr", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwindstr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbtextright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbtextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowsprint", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowsprint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtobackpack", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additemtobackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrollspeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrollspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideselection", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hideselection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removedrawlinks", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removedrawlinks)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointcompletionradius", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointcompletionradius)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupiconparams", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupiconparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbcolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratoreditingareatype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcuratoreditingareatype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"confirmsensortarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (confirmsensortarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceweaponfire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceweaponfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightambient", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightambient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removesimpletask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removesimpletask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdestination", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdestination)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menupicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menupicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlenable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupchat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrain", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrain)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"add3denlayer", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (add3denlayer)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getspeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cuttext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cuttext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskstate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settaskstate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerattachvehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerattachvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcamuseti", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcamuseti)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoraddons", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcuratoraddons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addbackpackcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"join", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (join)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"glanceat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (glanceat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayremovealleventhandlers", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayremovealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapscreentoworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapscreentoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointname", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"counttype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (counttype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveobjecttoend", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveobjecttoend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazinesturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemagazinesturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrectangular", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrectangular)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuenable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctheadercontrols", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctheadercontrols)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"suppressfor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (suppressfor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextcolorsecondary", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettextcolorsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inserteditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inserteditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denlogictype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denlogictype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdynamicsimulationdistancecoef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdynamicsimulationdistancecoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fadespeech", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fadespeech)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpylonspriority", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpylonspriority)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"closedisplay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (closedisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskresult", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settaskresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightuseflare", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightuseflare)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvelocity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"breakout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (breakout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeany", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isequaltypeany)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawtriangle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawtriangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselectcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"mapcenteroncamera", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapcenteroncamera)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammocargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setammocargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackcargoglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addbackpackcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distance2d", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (distance2d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createsimpletask", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createsimpletask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfsm", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcamerainterest", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcamerainterest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorwaypointcost", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcuratorwaypointcost)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"diarysubjectexists", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diarysubjectexists)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectrandomweighted", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectrandomweighted)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setslingload", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setslingload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"random", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (random)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlchecked", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsettooltip", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfaceanimation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfaceanimation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflaganimationphase", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setflaganimationphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addhandgunitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addhandgunitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointloiterradius", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointloiterradius)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpipeffect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpipeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playactionnow", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playactionnow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weapondirection", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weapondirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrolldelay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrolldelay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countunknown", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (countunknown)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapworldtoscreen", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapworldtoscreen)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ropeattachto", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeattachto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addpublicvariableeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addpublicvariableeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tofixed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tofixed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetactivecolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetactivecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveincargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveincargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtouniform", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canadditemtouniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbleedingremaining", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setbleedingremaining)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightflaresize", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightflaresize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazines", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormodeltoworldvisual", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectormodeltoworldvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distance", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (distance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execeditorscript", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (execeditorscript)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticleclass", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setparticleclass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlecircle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setparticlecircle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmember", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (foreachmember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocitymodelspace", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvelocitymodelspace)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatebay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animatebay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findcover", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (findcover)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorfromto", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorfromto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth1", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth1)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolorbox", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolorbox)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawlocation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawlocation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointdescription", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointdescription)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemcargoglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additemcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelremove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiochannelremove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removedrawicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removedrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightattenuation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlightattenuation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth2", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setname", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addgroupicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuexpand", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuexpand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectforceinnvg", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectforceinnvg)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupowner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclearmor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclearmor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmenu", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmenu)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"savestatus", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (savestatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormultiply", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectormultiply)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapanimadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapanimadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setstamina", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setstamina)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth3", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth3)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaves", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaves)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetposition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparerelpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparerelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setconvoyseparation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setconvoyseparation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablefatigue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablefatigue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveindriver", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveindriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectdiarysubject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectdiarysubject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canslingload", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canslingload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sort", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createmissiondisplay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createmissiondisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfuelcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfuelcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dotarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dotarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addvest", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addvest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remoteexeccall", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remoteexeccall)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth4", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth4)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbreact", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbreact)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordiff", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordiff)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"land", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (land)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablegunlights", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablegunlights)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setowner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth5", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth5)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpictureright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctremoveheaders", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctremoveheaders)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchcamera", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchcamera)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunloadincombat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunloadincombat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"skillfinal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (skillfinal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadidentity", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addsecondaryweaponitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addsecondaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth6", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth6)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratorcameraarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removecuratorcameraarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeteammember", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeteammember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buttonsetaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buttonsetaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menudelete", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menudelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinassilent", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (joinassilent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (modeltoworldworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbcolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvcollapse", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcollapse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inflame", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inflame)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolumnspos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolumnspos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say2d", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (say2d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandchat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hintc", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hintc)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetcursel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointvisible", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointvisible)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearobjects", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorcrossproduct", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorcrossproduct)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideobjectglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hideobjectglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskdestination", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimpletaskdestination)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandartilleryfire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandartilleryfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleradar", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicleradar)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dosuppressivefire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dosuppressivefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignteam", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignteam)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"callextension", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (callextension)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbhastopic", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbhastopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menutext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menutext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbaddcolumn", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbaddcolumn)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggeractivation", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggeractivation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtovest", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additemtovest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"adduniform", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (adduniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"globalchat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (globalchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menushortcuttext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menushortcuttext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth3b", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth3b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"stop", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (stop)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleammo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicleammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcombatmode", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcombatmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjecttexture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjecttexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assigntoairport", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assigntoairport)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableattack", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableattack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createmenu", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createmenu)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"debugfsm", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (debugfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfovrange", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetfovrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizeobjectsremove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizeobjectsremove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menudata", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menudata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworld", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (modeltoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"checkvisibility", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (checkvisibility)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbremovetopic", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbremovetopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggerarea", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggerarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparedive", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparedive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointtimeout", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointtimeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableaimprecision", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableaimprecision)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascargoindex", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignascargoindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"emptypositions", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (emptypositions)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createvehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandmove", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ammo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetrowtemplate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctsetrowtemplate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowfleeing", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowfleeing)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagowner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setflagowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetsaggregate", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (targetsaggregate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethitpointdamage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gethitpointdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"leavevehicle", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leavevehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unassignitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unassignitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeech", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setspeech)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addheadgear", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addheadgear)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfeaturetype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfeaturetype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denlayer", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denlayer)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectordirandup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvectordirandup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandtarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandtarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"flyinheight", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flyinheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setside", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockdriver", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockdriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addwaypoint", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertext", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggertext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizetrigger", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizetrigger)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordotproduct", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordotproduct)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectargument", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectargument)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolorselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"exec", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (exec)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setovercast", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setovercast)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleteat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getcargoindex", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcargoindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setradiomsg", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setradiomsg)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereportremotetargets", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclereportremotetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetaction", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsoundeffect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsoundeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"objstatus", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (objstatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"geteditorobjectscope", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (geteditorobjectscope)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"customchat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (customchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"move", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (move)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrotorbrakertd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrotorbrakertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetcursel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inrangeofartillery", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inrangeofartillery)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"listobjects", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (listobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"connectterminaltouav", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (connectterminaltouav)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwingforcescalertd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwingforcescalertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleterange", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleterange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrladdeventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrladdeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlefire", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setparticlefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolorselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setskill", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setskill)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeweaponcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unlinkitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unlinkitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentmagazineturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentmagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forgettarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forgettarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbrakesrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setbrakesrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"worldtomodelvisual", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (worldtomodelvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"faderadio", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (faderadio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setoxygenremaining", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setoxygenremaining)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"iskindof", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (iskindof)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectchildren", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectchildren)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setimportance", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setimportance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countfriendly", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (countfriendly)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommand", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camcommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removegroupicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removegroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"publicvariableclient", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (publicvariableclient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vehiclechat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehiclechat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochanneladd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiochanneladd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodelscale", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodelscale)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findemptypositionready", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (findemptypositionready)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableautotrimrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableautotrimrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasdriver", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignasdriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablecopilot", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablecopilot)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuadd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"landat", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (landat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"onshownewobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onshownewobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointloitertype", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointloitertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowcrewinimmobile", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowcrewinimmobile)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkercolorlocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkercolorlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggerstatements", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settriggerstatements)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgusts", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgusts)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrank", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkershape", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkershape)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"clear3denattribute", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clear3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableirlasers", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableirlasers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablechannel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablechannel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getenvsoundcontroller", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getenvsoundcontroller)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbtextright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbtextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtovest", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canadditemtovest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addscoreside", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addscoreside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableropeattach", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableropeattach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleammodef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehicleammodef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableautostartuprtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableautostartuprtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmagazineturretammo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmagazineturretammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethidefrom", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gethidefrom)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ondoubleclick", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ondoubleclick)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponattachmentcargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeweaponattachmentcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrepaircargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setrepaircargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunconscious", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setunconscious)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupicon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointbehaviour", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwaypointbehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetspeed", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inareaarray", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inareaarray)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createdisplay", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createdisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbvalue", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvpicture", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorcoef", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcuratorcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorselected", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoreditableobjects", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcuratoreditableobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"infopanelcomponents", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (infopanelcomponents)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackglobal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addbackpackglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbwassaid", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (kbwassaid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getcompatiblepylonmagazines", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcompatiblepylonmagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"evalobjectargument", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (evalobjectargument)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcselectgroup", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcselectgroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetcheck", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetcheck)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoreditableobjects", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removecuratoreditableobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createvehiclelocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createvehiclelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpack", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addbackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheightsecondary", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheightsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfsmvariable", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setfsmvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefovrange", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparefovrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveincommander", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveincommander)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupselectunit", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupselectunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmemberagent", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (foreachmemberagent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolor", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fireattarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fireattarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlseteventhandler", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdriveonpath", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdriveonpath)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setenginerpmrtd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setenginerpmrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmemberteam", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (foreachmemberteam)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addownedmine", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addownedmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showneweditorobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showneweditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"params", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (params)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cameraeffect", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cameraeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclecargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getartilleryeta", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getartilleryeta)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lookatpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lookatpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofsm", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dofsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectmaterial", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectmaterial)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fademusic", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fademusic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removealleventhandlers", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camsetpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinas", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (joinas)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveingunner", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveingunner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparepos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparepos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkeralphalocal", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkeralphalocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disablecollisionwith", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disablecollisionwith)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypearray", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isequaltypearray)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclelock", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setvehiclelock)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addprimaryweaponitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addprimaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcursel", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteffectcondition", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (seteffectcondition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"aimedattarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (aimedattarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawellipse", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawellipse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setactualcollectivertd", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setactualcollectivertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpos", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"editobject", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (editobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorright", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowdammage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allowdammage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbehaviour", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setbehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findnearestenemy", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (findnearestenemy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dowatch", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dowatch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isirlaseron", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isirlaseron)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth1", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth1)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkersize", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkersize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearentities", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearentities)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolordisabled", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lock", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lock)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponaccessories", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponaccessories)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"magazinesturret", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth2", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefocus", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreparefocus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpitch", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpitch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkeralpha", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmarkeralpha)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectproxy", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectproxy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskmarkeroffset", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settaskmarkeroffset)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcameradirection", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpilotcameradirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth3", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth3)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settargetage", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settargetage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcameratarget", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setpilotcameratarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removesecondaryweaponitem", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removesecondaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponaccessoriescargo", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponaccessoriescargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweapon", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth4", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth4)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusort", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth5", type::ANY, type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> l, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth5)." << std::endl; return std::make_shared<value>(); }));



	add(unary(L"showradio", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showradio)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"vectorup", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorup)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsetcurselrow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcurselrow)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"animationnames", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animationnames)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"currentzeroing", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentzeroing)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isonroad", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isonroad)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"triggerarea", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerarea)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"get3dengrid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3dengrid)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"settrafficspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settrafficspeed)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"supportinfo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (supportinfo)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"menucollapse", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menucollapse)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"taskdescription", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskdescription)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"isautohoveron", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isautohoveron)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlangle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlangle)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"menusetdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"moonphase", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moonphase)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"onplayerdisconnected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onplayerdisconnected)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"isshowing3dicons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isshowing3dicons)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbsetcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getallhitpointsdamage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getallhitpointsdamage)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetcolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"triggertext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggertext)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getfatigue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getfatigue)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlshown", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlshown)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"eyedirection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (eyedirection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlmodel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmodel)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"tvtext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvtext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ropeunwind", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeunwind)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"fillweaponsfrompool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fillweaponsfrompool)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hcselected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcselected)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"asltoagl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (asltoagl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isobjectrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isobjectrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enabletraffic", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enabletraffic)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"roledescription", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (roledescription)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"simpletasks", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simpletasks)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getammocargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getammocargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"flagowner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flagowner)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"deletegroup", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletegroup)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"tvdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getenginetargetrpmrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getenginetargetrpmrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointattachedvehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointattachedvehicle)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"speed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (speed)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menusetvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"reloadenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (reloadenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"rating", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rating)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hideobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hideobject)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"useaiopermapobstructiontest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (useaiopermapobstructiontest)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"primaryweapon", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (primaryweapon)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"addtoremainscollector", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addtoremainscollector)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"uisleep", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uisleep)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"ctrlmodelscale", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmodelscale)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"curatorcameraareaceiling", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorcameraareaceiling)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removevest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removevest)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"gearslotdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gearslotdata)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"formationposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formationposition)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"gettrimoffsetrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gettrimoffsetrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getmissionconfigvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmissionconfigvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,STRING */
	add(unary(L"simulcloudocclusion", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simulcloudocclusion)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"movetofailed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (movetofailed)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"playmission", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playmission)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"rankid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rankid)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showgps", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showgps)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"synchronizedtriggers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizedtriggers)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removeallitemswithmagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallitemswithmagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setaperturenew", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setaperturenew)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"simulinclouds", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simulinclouds)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menuurl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuurl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"leaderboardsrequestuploadscorekeepbest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardsrequestuploadscorekeepbest)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removebackpackglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removebackpackglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"exportjipmessages", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (exportjipmessages)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ctrlhtmlloaded", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlhtmlloaded)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"getmarkercolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmarkercolor)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"markeralpha", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markeralpha)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"face", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (face)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetselectcolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getvehiclecargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getvehiclecargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"deletelocation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletelocation)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"waypointvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointvisible)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"enablesatnormalondetail", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablesatnormalondetail)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"getposatl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposatl)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"objectcurators", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (objectcurators)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"activatekey", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (activatekey)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"disableremotesensors", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableremotesensors)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"attackenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attackenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT,GROUP */
	add(unary(L"curatoreditingarea", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatoreditingarea)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"playmusic", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playmusic)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"playmusic", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playmusic)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"assignedteam", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedteam)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vectordirvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordirvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsetvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"triggeractivated", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggeractivated)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"set3denmissionattributes", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denmissionattributes)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"unassignvehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unassignvehicle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"boundingbox", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (boundingbox)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ppeffectcreate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectcreate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"movetime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (movetime)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointspeed)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ctrltext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrltext)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"ctrltext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrltext)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"ctrlclassname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlclassname)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"actionname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionname)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"animationstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (animationstate)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"markertype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markertype)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"menuchecked", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuchecked)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lineintersectsobjs", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lineintersectsobjs)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"weaponcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"buttonaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buttonaction)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"buttonaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buttonaction)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"set3deniconsvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3deniconsvisible)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"hcshowbar", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcshowbar)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"drop", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drop)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isturnedout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isturnedout)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"addweaponpool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addweaponpool)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"camtarget", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camtarget)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setwinddir", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwinddir)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getcameraviewdirection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcameraviewdirection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"set3denattributes", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denattributes)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"slidersetrange", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetrange)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"textlogformat", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (textlogformat)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deletemarkerlocal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletemarkerlocal)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lnbsettext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsettext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"waypointstatements", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointstatements)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"scudstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scudstate)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"sliderrange", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderrange)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"sliderrange", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderrange)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"isautotrimonrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isautotrimonrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"boundingboxreal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (boundingboxreal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"terrainintersect", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (terrainintersect)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ropedestroy", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropedestroy)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvsetpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createteam", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createteam)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbsettextright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsettextright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"param", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (param)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lbsetpicturecolordisabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolordisabled)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setcamshakeparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcamshakeparams)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lognetwork", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lognetwork)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"debriefingtext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (debriefingtext)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lnbsortbyvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsortbyvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"istouchingground", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (istouchingground)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"taskmarkeroffset", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskmarkeroffset)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"aisfinishheal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (aisfinishheal)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvsetpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"vest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vest)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"headgear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (headgear)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsetdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"fuel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fuel)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"agltoasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (agltoasl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"weaponsitemscargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponsitemscargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"linearconversion", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (linearconversion)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removemissioneventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemissioneventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"damage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (damage)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getmodelinfo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmodelinfo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"dogetout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dogetout)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"getbleedingremaining", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getbleedingremaining)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"squadparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (squadparams)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"groupfromnetid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupfromnetid)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"leader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leader)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"leader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leader)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"leader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leader)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"settrafficdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settrafficdistance)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"currentthrowable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentthrowable)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enableengineartillery", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableengineartillery)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"terrainintersectasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (terrainintersectasl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"debuglog", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (debuglog)." << std::endl; return std::make_shared<value>(); })); /* ANY */
	add(unary(L"lnbsetpicturecolorselectedright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselectedright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbaddarray", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbaddarray)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"savevar", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (savevar)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"onbriefingteamswitch", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onbriefingteamswitch)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lbsetvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"edit3denmissionattributes", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (edit3denmissionattributes)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"uniformitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uniformitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getcustomaimcoef", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcustomaimcoef)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ingameuiseteventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ingameuiseteventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"leaderboardrequestrowsfriends", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardrequestrowsfriends)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"showcommandingmenu", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showcommandingmenu)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"unitrecoilcoefficient", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitrecoilcoefficient)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"unassigncurator", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unassigncurator)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"actionkeysnames", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionkeysnames)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,STRING */
	add(unary(L"objectparent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (objectparent)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"clearmagazinecargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearmagazinecargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hostmission", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hostmission)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"canmove", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canmove)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getstatvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getstatvalue)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"tvsettext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsettext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"positioncameratoworld", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (positioncameratoworld)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getwingsorientationrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getwingsorientationrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isstaminaenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isstaminaenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"weaponsitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponsitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vectornormalized", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectornormalized)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"unitbackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitbackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"finite", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (finite)." << std::endl; return std::make_shared<value>(); })); /* SCALAR,NaN */
	add(unary(L"lnbtext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbtext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"teamname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teamname)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"pickweaponpool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (pickweaponpool)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"surfaceiswater", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (surfaceiswater)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getslingload", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getslingload)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"reload", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (reload)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvsetdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setterraingrid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setterraingrid)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"speaker", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (speaker)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsettooltip", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsettooltip)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"weapons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weapons)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"selectededitorobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectededitorobjects)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"removeall3deneventhandlers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeall3deneventhandlers)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"leaderboardsrequestuploadscore", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardsrequestuploadscore)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"unitisuav", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitisuav)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbadd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbadd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbclear)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lnbclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbclear)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"assignedtarget", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedtarget)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"cameraeffectenablehud", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cameraeffectenablehud)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"execfsm", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (execfsm)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"attachedto", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attachedto)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showuavfeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showuavfeed)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"querymagazinepool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (querymagazinepool)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"effectivecommander", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (effectivecommander)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"sizeof", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sizeof)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"landresult", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (landresult)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"cbchecked", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cbchecked)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"onhcgroupselectionchanged", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onhcgroupselectionchanged)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"ctrlscale", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlscale)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbtext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbtext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"clearweaponcargoglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearweaponcargoglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"assigneddriver", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assigneddriver)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"allcontrols", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allcontrols)." << std::endl; return std::make_shared<value>(); })); /* DISPLAY */
	add(unary(L"taskresult", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskresult)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"lbpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"do3denaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (do3denaction)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"numbertodate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (numbertodate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"leaderboardstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardstate)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"tvsetpicturecolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"secondaryweaponmagazine", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (secondaryweaponmagazine)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setaperture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setaperture)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"showpad", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showpad)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"ctrlidc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlidc)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"getdir", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdir)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"uniformcontainer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uniformcontainer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsortbyvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsortbyvalue)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"isplayer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isplayer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"buldozer_enableroaddiag", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buldozer_enableroaddiag)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"campreloaded", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (campreloaded)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"local", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (local)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"local", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (local)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"drawicon3d", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawicon3d)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"surfacetype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (surfacetype)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lbdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lbdelete", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbdelete)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"boundingcenter", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (boundingcenter)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enablediaglegend", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablediaglegend)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"ctrlidd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlidd)." << std::endl; return std::make_shared<value>(); })); /* DISPLAY */
	add(unary(L"fleeing", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fleeing)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getgroupiconparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getgroupiconparams)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"cutobj", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cutobj)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"iscopilotenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (iscopilotenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"uniform", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uniform)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"delete3denentities", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (delete3denentities)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"commandgetout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandgetout)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"wfsidetext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (wfsidetext)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"wfsidetext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (wfsidetext)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"wfsidetext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (wfsidetext)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"tvexpandall", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvexpandall)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"tvexpandall", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvexpandall)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"velocitymodelspace", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (velocitymodelspace)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getallownedmines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getallownedmines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"onpreloadstarted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onpreloadstarted)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"modparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (modparams)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"flagtexture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flagtexture)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getfuelcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getfuelcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"rotorsrpmrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rotorsrpmrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointloiterradius", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointloiterradius)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"size", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (size)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"captivenum", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (captivenum)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointtimeout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointtimeout)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvsort", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsort)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"selectionnames", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectionnames)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbselection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbselection)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"position", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (position)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"position", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (position)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"canunloadincombat", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canunloadincombat)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"attachedobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attachedobjects)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"netid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (netid)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"netid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (netid)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"waypointcompletionradius", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointcompletionradius)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removeallassigneditems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallassigneditems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ropeunwound", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeunwound)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isdlcavailable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isdlcavailable)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"waypointtype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointtype)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"addswitchableunit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addswitchableunit)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"closeoverlay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (closeoverlay)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"tvexpand", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvexpand)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getartilleryammo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getartilleryammo)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvadd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvadd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"owner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (owner)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"progressloadingscreen", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (progressloadingscreen)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"estimatedtimeleft", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (estimatedtimeleft)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"driver", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (driver)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"displayparent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displayparent)." << std::endl; return std::make_shared<value>(); })); /* DISPLAY */
	add(unary(L"sleep", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sleep)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"create3denentity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (create3denentity)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"primaryweaponmagazine", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (primaryweaponmagazine)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlparentcontrolsgroup", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlparentcontrolsgroup)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"actionkeysimages", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionkeysimages)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,STRING */
	add(unary(L"enablesentences", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablesentences)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"try", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (try)." << std::endl; return std::make_shared<value>(); })); /* CODE */
	add(unary(L"curatoreditableobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatoreditableobjects)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"entities", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (entities)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"entities", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (entities)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvcount", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcount)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setgroupiconsselectable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupiconsselectable)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"showwarrant", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showwarrant)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"assigneditems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assigneditems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"copytoclipboard", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (copytoclipboard)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"groupselectedunits", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupselectedunits)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"titlefadeout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (titlefadeout)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"atltoasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (atltoasl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"loaduniform", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loaduniform)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"someammo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (someammo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setwind", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setwind)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"groupowner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (groupowner)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"isweaponrested", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isweaponrested)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isaimprecisionenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isaimprecisionenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isagent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isagent)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"commander", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commander)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"markerpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markerpos)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"leaderboardinit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardinit)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"taskcustomdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskcustomdata)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"lnbdeletecolumn", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdeletecolumn)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"incapacitatedstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (incapacitatedstate)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"saveoverlay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (saveoverlay)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"magazinesallturrets", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesallturrets)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"collectivertd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (collectivertd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvdelete", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvdelete)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"taskcompleted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskcompleted)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"playsound3d", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playsound3d)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getanimaimprecision", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getanimaimprecision)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"execvm", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (execvm)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"waypointformation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointformation)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"cantriggerdynamicsimulation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cantriggerdynamicsimulation)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"get3denconnections", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denconnections)." << std::endl; return std::make_shared<value>(); })); /* ANY */
	add(unary(L"ongroupiconoverenter", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ongroupiconoverenter)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"backpackmagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpackmagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"cutrsc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cutrsc)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"weaponlowered", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponlowered)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"handshit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (handshit)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"selectbestplaces", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectbestplaces)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removeallcuratorcameraareas", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallcuratorcameraareas)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"taskparent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskparent)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"triggertype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggertype)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hidebody", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hidebody)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getpilotcameratarget", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpilotcameratarget)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menuenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuenabled)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"showchat", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showchat)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"scoreside", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scoreside)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"behaviour", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (behaviour)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getmagazinecargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmagazinecargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"nearestterrainobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestterrainobjects)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lifestate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lifestate)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"issprintallowed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (issprintallowed)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"classname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (classname)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"difficultyoption", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (difficultyoption)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getfieldmanualstartpage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getfieldmanualstartpage)." << std::endl; return std::make_shared<value>(); })); /* DISPLAY */
	add(unary(L"islocalized", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (islocalized)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"triggertimeout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggertimeout)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"remoteexec", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remoteexec)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"units", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (units)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"units", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (units)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallcontainers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallcontainers)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hcleader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcleader)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"detectedmines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (detectedmines)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"getobjecttype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjecttype)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ropeattachedto", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeattachedto)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"diag_codeperformance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_codeperformance)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"inputaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inputaction)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"oncommandmodechanged", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (oncommandmodechanged)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"movetocompleted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (movetocompleted)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"requiredversion", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (requiredversion)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lnbaddrow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbaddrow)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"textlog", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (textlog)." << std::endl; return std::make_shared<value>(); })); /* ANY */
	add(unary(L"openyoutubevideo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (openyoutubevideo)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"combatmode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (combatmode)." << std::endl; return std::make_shared<value>(); })); /* OBJECT,GROUP */
	add(unary(L"ppeffectdestroy", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectdestroy)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"ppeffectdestroy", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectdestroy)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"add3deneventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (add3deneventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"canstand", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canstand)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vectormagnitude", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectormagnitude)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"rotorsforcesrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rotorsforcesrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"formationleader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formationleader)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"radiochannelcreate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiochannelcreate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"enginestorquertd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enginestorquertd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isengineon", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isengineon)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"add3denconnection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (add3denconnection)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"collapseobjecttree", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (collapseobjecttree)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"waypointhouseposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointhouseposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getplayerscores", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getplayerscores)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enableradio", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableradio)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"scriptdone", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scriptdone)." << std::endl; return std::make_shared<value>(); })); /* SCRIPT */
	add(unary(L"skill", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (skill)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"settimemultiplier", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settimemultiplier)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"waypointtimeoutcurrent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointtimeoutcurrent)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"magazinecargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinecargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ropecut", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropecut)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"creatediarylink", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (creatediarylink)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"backpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlmapanimcommit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapanimcommit)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"mapanimadd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapanimadd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"surfacenormal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (surfacenormal)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lineintersectswith", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lineintersectswith)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"hcremoveallgroups", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcremoveallgroups)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waituntil", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waituntil)." << std::endl; return std::make_shared<value>(); })); /* CODE */
	add(unary(L"getposworld", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposworld)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showwatch", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showwatch)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"configsourcemodlist", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (configsourcemodlist)." << std::endl; return std::make_shared<value>(); })); /* CONFIG */
	add(unary(L"createtrigger", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createtrigger)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getstamina", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getstamina)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointshow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointshow)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ctrltype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrltype)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"getmass", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmass)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"weaponstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponstate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"lbpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"load", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (load)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"loadabs", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadabs)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeswitchableunit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeswitchableunit)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsort", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsort)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"islighton", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (islighton)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"simulationenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simulationenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"currentmagazinedetail", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentmagazinedetail)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"onmapsingleclick", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onmapsingleclick)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"screenshot", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (screenshot)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"unitaimpositionvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitaimpositionvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"actionids", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionids)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"everybackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (everybackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"asltoatl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (asltoatl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"sethudmovementlevels", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethudmovementlevels)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"set3denmodelsvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denmodelsvisible)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"currentmuzzle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentmuzzle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlautoscrollspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlautoscrollspeed)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"currentweaponmode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentweaponmode)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getwingspositionrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getwingspositionrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointloitertype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointloitertype)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"name", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (name)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"name", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (name)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"onbriefinggroup", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onbriefinggroup)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"locationposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (locationposition)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"importance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (importance)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"captive", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (captive)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isweapondeployed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isweapondeployed)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menushortcut", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menushortcut)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"assert", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assert)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"keyimage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (keyimage)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"removeallweapons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallweapons)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"titleobj", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (titleobj)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lbsort", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsort)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbsort", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsort)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"vehiclevarname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehiclevarname)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"triggertimeoutcurrent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggertimeoutcurrent)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlmodeldirandup", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmodeldirandup)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"assignedgunner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedgunner)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setmouseposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmouseposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"terminate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (terminate)." << std::endl; return std::make_shared<value>(); })); /* SCRIPT */
	add(unary(L"soldiermagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (soldiermagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getmarkerpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmarkerpos)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"endmission", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (endmission)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"leaderboardrequestrowsglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardrequestrowsglobal)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"magazinesammo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesammo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeuniform", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeuniform)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"faction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (faction)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrltextsecondary", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrltextsecondary)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"clear3deninventory", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clear3deninventory)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"servercommandavailable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servercommandavailable)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"geteditormode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (geteditormode)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"removeallprimaryweaponitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallprimaryweaponitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menuhover", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuhover)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"menuhover", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuhover)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"verifysignature", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (verifysignature)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"group", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (group)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"allturrets", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allturrets)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"allturrets", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allturrets)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"restarteditorcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (restarteditorcamera)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"camcommitted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camcommitted)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvtooltip", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvtooltip)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"startloadingscreen", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (startloadingscreen)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ctrlsettext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsettext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"enabledynamicsimulation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enabledynamicsimulation)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"currenttask", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currenttask)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"flagside", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flagside)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isinremainscollector", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isinremainscollector)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"nearestobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestobject)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"magazinesammocargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesammocargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setplayable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setplayable)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"unlockachievement", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unlockachievement)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lbsettext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsettext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isautonomous", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isautonomous)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"additempool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (additempool)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getmissionlayerentities", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmissionlayerentities)." << std::endl; return std::make_shared<value>(); })); /* SCALAR,STRING */
	add(unary(L"lnbdeleterow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbdeleterow)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"throw", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (throw)." << std::endl; return std::make_shared<value>(); })); /* ANY */
	add(unary(L"dissolveteam", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dissolveteam)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"publicvariableserver", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (publicvariableserver)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"handgunmagazine", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (handgunmagazine)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getoxygenremaining", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getoxygenremaining)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"progressposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (progressposition)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"tvvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"vehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehicle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"buldozer_loadnewroads", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buldozer_loadnewroads)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"removeallactions", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallactions)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vectormagnitudesqr", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectormagnitudesqr)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"servercommand", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servercommand)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"attachedobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (attachedobject)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"everycontainer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (everycontainer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlautoscrollrewind", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlautoscrollrewind)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"stopenginertd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (stopenginertd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"preprocessfilelinenumbers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preprocessfilelinenumbers)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"gunner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gunner)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetdata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetdata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isvehiclecargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isvehiclecargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"agent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (agent)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"openmap", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (openmap)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"openmap", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (openmap)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"playsound", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playsound)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"playsound", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playsound)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"dostop", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dostop)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"oneachframe", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (oneachframe)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"lightdetachobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lightdetachobject)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getpersonuseddlcs", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpersonuseddlcs)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getgroupicons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getgroupicons)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"getwppos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getwppos)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setsimulweatherlayers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsimulweatherlayers)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getdescription", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdescription)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ropeendposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeendposition)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"text", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (text)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"text", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (text)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"items", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (items)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showcinemaborder", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showcinemaborder)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"ctrlautoscrolldelay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlautoscrolldelay)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"onpreloadfinished", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onpreloadfinished)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"nearestlocation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestlocation)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getrepaircargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getrepaircargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"titlersc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (titlersc)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setcurrentchannel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcurrentchannel)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"lbsetpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menusize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusize)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"pitch", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (pitch)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"onbriefingplan", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onbriefingplan)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"formattext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formattext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"camerainterest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camerainterest)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeheadgear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeheadgear)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"side", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (side)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"side", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (side)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"side", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (side)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"completedfsm", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (completedfsm)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"playableslotsnumber", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playableslotsnumber)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"servercommandexecutable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servercommandexecutable)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"enablesaving", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablesaving)." << std::endl; return std::make_shared<value>(); })); /* BOOL,ARRAY */
	add(unary(L"remove3denconnection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remove3denconnection)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"queryitemspool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (queryitemspool)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"isformationleader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isformationleader)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"numberofenginesrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (numberofenginesrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"velocity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (velocity)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setplayerrespawntime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setplayerrespawntime)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"preloadsound", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preloadsound)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getallsoundcontrollers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getallsoundcontrollers)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setviewdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setviewdistance)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getmarkertype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmarkertype)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"magazinesdetail", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesdetail)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"markersize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markersize)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ctrlshow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlshow)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"waypointattachedobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointattachedobject)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ishidden", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ishidden)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"preloadtitleobj", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preloadtitleobj)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvcollapseall", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcollapseall)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"tvcollapseall", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcollapseall)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"ctrlparent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlparent)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"diag_dynamicsimulationend", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_dynamicsimulationend)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"registeredtasks", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (registeredtasks)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"forceatpositionrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceatpositionrtd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"actionkeysnamesarray", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionkeysnamesarray)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,STRING */
	add(unary(L"titlecut", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (titlecut)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"configsourceaddonlist", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (configsourceaddonlist)." << std::endl; return std::make_shared<value>(); })); /* CONFIG */
	add(unary(L"menuaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuaction)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"disableuserinput", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableuserinput)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"set3denlinesvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denlinesvisible)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"aimpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (aimpos)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"cancelsimpletaskdestination", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cancelsimpletaskdestination)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"clearweaponcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearweaponcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enableenvironment", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableenvironment)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"markercolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markercolor)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"createsimpleobject", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createsimpleobject)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"airportside", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (airportside)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"assignedvehiclerole", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedvehiclerole)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbgetcolumnsposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbgetcolumnsposition)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lnbgetcolumnsposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbgetcolumnsposition)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"enableteamswitch", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableteamswitch)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"waypointforcebehaviour", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointforcebehaviour)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"precision", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (precision)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ropes", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropes)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"settrafficdensity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settrafficdensity)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createsoundsource", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createsoundsource)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"backpackcontainer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpackcontainer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vectorupvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectorupvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"leaderboardrequestrowsglobalarounduser", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardrequestrowsglobalarounduser)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"vectordir", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vectordir)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"clearbackpackcargoglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearbackpackcargoglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getdlcusagetime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdlcusagetime)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"members", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (members)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"worldtoscreen", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (worldtoscreen)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"teamtype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teamtype)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"removeallhandgunitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallhandgunitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"curatoreditingareatype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatoreditingareatype)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"magazinesdetailbackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesdetailbackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlmapscale", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapscale)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"createdialog", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createdialog)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"currentwaypoint", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentwaypoint)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"createmarker", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createmarker)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"magazinesammofull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesammofull)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"putweaponpool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (putweaponpool)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getobjectdlc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectdlc)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enabledebriefingstats", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enabledebriefingstats)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"goto", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (goto)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"deletewaypoint", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletewaypoint)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setshadowdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setshadowdistance)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"tvsortbyvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsortbyvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lockidentity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockidentity)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"score", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (score)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetpicturecolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"nextmenuitemindex", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nextmenuitemindex)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lasertarget", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lasertarget)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"unitready", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitready)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"showmap", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showmap)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"deletemarker", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletemarker)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"isautostartupenabledrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isautostartupenabledrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"allmissionobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allmissionobjects)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getcenterofmass", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcenterofmass)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"stance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (stance)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"curatorpoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorpoints)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbtextright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbtextright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"alive", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (alive)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getterrainheightasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getterrainheightasl)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"crew", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (crew)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"triggerattachedvehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerattachedvehicle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"rank", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rank)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getrotorbrakertd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getrotorbrakertd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"itemswithmagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (itemswithmagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"selectmax", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectmax)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"selectmin", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectmin)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isbleeding", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isbleeding)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isrealtime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isrealtime)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"ctrlactivate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlactivate)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"processdiarylink", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (processdiarylink)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lbcolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menupicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menupicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"namesound", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (namesound)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"locked", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (locked)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlenable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlenable)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getdlcassetsusagebyname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdlcassetsusagebyname)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"clearbackpackcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearbackpackcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"cuttext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cuttext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"formationdirection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formationdirection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"preloadtitlersc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preloadtitlersc)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getweaponcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getweaponcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isabletobreathe", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isabletobreathe)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getassignedcuratorunit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getassignedcuratorunit)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlcommitted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlcommitted)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"get3denentity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denentity)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"ctrlmapanimdone", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapanimdone)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"setgroupiconsvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setgroupiconsvisible)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"gearslotammocount", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gearslotammocount)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"enginespowerrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enginespowerrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"markerbrush", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markerbrush)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"sethorizonparallaxcoef", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sethorizonparallaxcoef)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"echo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (echo)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"dynamicsimulationenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dynamicsimulationenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"dynamicsimulationenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dynamicsimulationenabled)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"hcallgroups", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcallgroups)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setcamshakedefparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcamshakedefparams)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"screentoworld", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (screentoworld)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menuenable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuenable)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"currentcommand", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentcommand)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"sliderposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderposition)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"sliderposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderposition)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"unitpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitpos)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"finddisplay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (finddisplay)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"itemcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (itemcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"secondaryweaponitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (secondaryweaponitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menuvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createmarkerlocal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createmarkerlocal)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deleteidentity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleteidentity)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getaimingcoef", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getaimingcoef)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"breakout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (breakout)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ropeattachedobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeattachedobjects)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetselectcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"mineactive", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mineactive)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enablestressdamage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablestressdamage)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"mapcenteroncamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapcenteroncamera)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbsetpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"handgunweapon", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (handgunweapon)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"activateaddons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (activateaddons)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"addmagazinepool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmagazinepool)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"synchronizedwaypoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizedwaypoints)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"synchronizedwaypoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizedwaypoints)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"vehiclecargoenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehiclecargoenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"save3deninventory", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (save3deninventory)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"compilefinal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (compilefinal)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"taskhint", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskhint)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"moveout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moveout)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setstatvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setstatvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deleteteam", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deleteteam)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"get3denactionstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denactionstate)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"createagent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createagent)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"importallgroups", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (importallgroups)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"assignedvehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedvehicle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"expecteddestination", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (expecteddestination)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"goggles", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (goggles)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallcuratoraddons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallcuratoraddons)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"objectfromnetid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (objectfromnetid)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ctrlchecked", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlchecked)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"tvsettooltip", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsettooltip)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isburning", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isburning)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getobjectmaterials", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectmaterials)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getplayeruid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getplayeruid)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"binocular", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (binocular)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getweaponsway", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getweaponsway)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"collect3denhistory", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (collect3denhistory)." << std::endl; return std::make_shared<value>(); })); /* CODE */
	add(unary(L"handgunitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (handgunitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallcuratoreditingareas", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallcuratoreditingareas)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"skiptime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (skiptime)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpos)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getpos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpos)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"curatorcameraarea", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorcameraarea)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enableaudiofeature", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableaudiofeature)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"publicvariable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (publicvariable)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"create3dencomposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (create3dencomposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"showscoretable", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showscoretable)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"backpackcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpackcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getobjecttextures", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjecttextures)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"vestmagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vestmagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"curatoraddons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatoraddons)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"secondaryweapon", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (secondaryweapon)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"get3denlayerentities", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denlayerentities)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"nearestobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestobjects)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getposvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"deletecollection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletecollection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"triggerstatements", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggerstatements)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"priority", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (priority)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"menusetpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setlocalwindparams", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setlocalwindparams)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lbvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createcenter", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createcenter)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"menuexpand", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuexpand)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getposaslw", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposaslw)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lineintersectssurfaces", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lineintersectssurfaces)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ongroupiconoverleave", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ongroupiconoverleave)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"camdestroy", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camdestroy)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"curatorwaypointcost", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorwaypointcost)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"slidersetposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ismarkedforcollection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ismarkedforcollection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getassignedcuratorlogic", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getassignedcuratorlogic)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"triggeractivation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (triggeractivation)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrldelete", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrldelete)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"parsetext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (parsetext)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"teammember", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teammember)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"actionkeys", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (actionkeys)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"waypointbehaviour", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointbehaviour)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"preloadcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preloadcamera)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"parsenumber", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (parsenumber)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"parsenumber", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (parsenumber)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"deletecenter", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletecenter)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"remoteexeccall", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remoteexeccall)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setstaminascheme", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setstaminascheme)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"rectangular", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rectangular)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"move3dencamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (move3dencamera)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"addmusiceventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmusiceventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"resetsubgroupdirection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (resetsubgroupdirection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lognetworkterminate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lognetworkterminate)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"channelenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (channelenabled)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"lnbsetpictureright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpictureright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"cleargroupicons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cleargroupicons)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"taskdestination", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskdestination)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"taskalwaysvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskalwaysvisible)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"vestitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vestitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"switchcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchcamera)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ppeffectcommitted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectcommitted)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ppeffectcommitted", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectcommitted)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"buttonsetaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buttonsetaction)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menudelete", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menudelete)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"fromeditor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fromeditor)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"waypointsenableduav", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointsenableduav)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvcollapse", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcollapse)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbcolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"airdensityrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (airdensityrtd)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"keyname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (keyname)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"closedialog", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (closedialog)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"lnbsetcolumnspos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolumnspos)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"commandstop", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandstop)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"scriptname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scriptname)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"list", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (list)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hintc", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hintc)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"detach", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (detach)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"needreload", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (needreload)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointdescription", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointdescription)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"image", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (image)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"dynamicsimulationdistancemult", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dynamicsimulationdistancemult)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"tvsetcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetcursel)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvclear)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"tvclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvclear)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* GROUP */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* SCRIPT */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* DISPLAY */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* CONFIG */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* NetObject */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"isnull", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isnull)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"setacctime", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setacctime)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"remove3denlayer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remove3denlayer)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"removebackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removebackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"hideobjectglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hideobjectglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbcurselrow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcurselrow)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lnbcurselrow", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbcurselrow)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getbackpackcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getbackpackcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getshotparents", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getshotparents)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"curatorregisteredobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorregisteredobjects)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlenabled)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"ctrlenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlenabled)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"removeallmusiceventhandlers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallmusiceventhandlers)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"playersnumber", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playersnumber)." << std::endl; return std::make_shared<value>(); })); /* SIDE */
	add(unary(L"onplayerconnected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onplayerconnected)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"menutext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menutext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbaddcolumn", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbaddcolumn)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menushortcuttext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menushortcuttext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"mapgridposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapgridposition)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"ropeattachenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropeattachenabled)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"firstbackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (firstbackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsetpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getitemcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getitemcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvsetvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removemusiceventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removemusiceventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getburningvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getburningvalue)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"formation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formation)." << std::endl; return std::make_shared<value>(); })); /* OBJECT,GROUP */
	add(unary(L"formation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formation)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"simulclouddensity", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simulclouddensity)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"localize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (localize)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"loadbackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadbackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"unassignteam", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unassignteam)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallownedmines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallownedmines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menudata", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menudata)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ropelength", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropelength)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getanimspeedcoef", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getanimspeedcoef)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"fullcrew", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fullcrew)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"fullcrew", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fullcrew)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createvehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createvehicle)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"formationmembers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formationmembers)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"addcamshake", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addcamshake)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"markertext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markertext)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getcontainermaxload", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getcontainermaxload)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"type", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (type)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"type", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (type)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"lnbsetpicturecolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"visibleposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visibleposition)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getpilotcameradirection", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpilotcameradirection)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"speedmode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (speedmode)." << std::endl; return std::make_shared<value>(); })); /* OBJECT,GROUP */
	add(unary(L"vestcontainer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vestcontainer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"currenttasks", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currenttasks)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"markerdir", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markerdir)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"showhud", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showhud)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"showhud", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showhud)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getposasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposasl)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showcuratorcompass", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showcuratorcompass)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"forcemap", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcemap)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"inflamed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (inflamed)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"loadfile", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadfile)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"waypoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypoints)." << std::endl; return std::make_shared<value>(); })); /* OBJECT,GROUP */
	add(unary(L"scopename", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scopename)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"menusetaction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetaction)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"weaponinertia", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weaponinertia)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"haspilotcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (haspilotcamera)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"isforcedwalk", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isforcedwalk)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"currentvisionmode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentvisionmode)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enablecaustics", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablecaustics)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"selectrandom", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectrandom)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deactivatekey", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deactivatekey)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"setdate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"direction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (direction)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"direction", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (direction)." << std::endl; return std::make_shared<value>(); })); /* LOCATION */
	add(unary(L"dynamicsimulationdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dynamicsimulationdistance)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ppeffectenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ppeffectenabled)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getdlcs", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdlcs)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getsuppression", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getsuppression)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetpicturecolorselected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"settrafficgap", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (settrafficgap)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"camusenvg", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (camusenvg)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"resources", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (resources)." << std::endl; return std::make_shared<value>(); })); /* TEAM_MEMBER */
	add(unary(L"hintsilent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hintsilent)." << std::endl; return std::make_shared<value>(); })); /* STRING,TEXT */
	add(unary(L"assignedcommander", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedcommander)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"taskchildren", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskchildren)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"updateobjecttree", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (updateobjecttree)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"showcompass", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showcompass)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"lnbpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"waypointname", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointname)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deletesite", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletesite)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"nearestbuilding", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestbuilding)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"nearestbuilding", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestbuilding)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"addforcegeneratorrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addforcegeneratorrtd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"forcegeneratorrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcegeneratorrtd)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getposatlvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposatlvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getallenvsoundcontrollers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getallenvsoundcontrollers)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"clearitemcargoglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearitemcargoglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getmissionconfig", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmissionconfig)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ctrltextheight", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrltextheight)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"removegoggles", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removegoggles)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showsubtitles", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showsubtitles)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"getplayerchannel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getplayerchannel)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menuadd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuadd)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"clearitemcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearitemcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"sendudpmessage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sendudpmessage)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"checkaifeature", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (checkaifeature)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"uavcontrol", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uavcontrol)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"iswalking", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (iswalking)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tasktype", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tasktype)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"flag", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (flag)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"composetext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (composetext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"formleader", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formleader)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"stopped", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (stopped)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"clearallitemsfrombackpack", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearallitemsfrombackpack)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"leaderboardgetrows", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboardgetrows)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"nearestlocations", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestlocations)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"addmissioneventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (addmissioneventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ongroupiconclick", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ongroupiconclick)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"hmd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hmd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setobjectviewdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectviewdistance)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"setobjectviewdistance", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setobjectviewdistance)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"remove3deneventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (remove3deneventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"waypointscript", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointscript)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbtextright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbtextright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"magazinesdetailuniform", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesdetailuniform)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tvsetpicturerightcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"hintcadet", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hintcadet)." << std::endl; return std::make_shared<value>(); })); /* STRING,TEXT */
	add(unary(L"set3dengrid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3dengrid)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"roadsconnectedto", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (roadsconnectedto)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcursel)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbcursel)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"canfire", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (canfire)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"creategeardialog", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (creategeardialog)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"slidersetspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slidersetspeed)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"configproperties", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (configproperties)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"sendaumessage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sendaumessage)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"iskeyactive", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (iskeyactive)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"isobjecthidden", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isobjecthidden)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"configsourcemod", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (configsourcemod)." << std::endl; return std::make_shared<value>(); })); /* CONFIG */
	add(unary(L"lnbvalue", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbvalue)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"tvpicture", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvpicture)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"underwater", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (underwater)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"showwaypoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showwaypoints)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"sliderspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderspeed)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"sliderspeed", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sliderspeed)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"setmusiceventhandler", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setmusiceventhandler)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"unitaimposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitaimposition)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lnbsize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsize)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lnbsize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsize)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"ropecreate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ropecreate)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deletestatus", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletestatus)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lnbsetpicturecolorselected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"morale", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (morale)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlfade", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlfade)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"selectplayer", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectplayer)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"menusetcheck", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusetcheck)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createlocation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createlocation)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"menuclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuclear)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"menuclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menuclear)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"failmission", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (failmission)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lnbsetcolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"preprocessfile", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (preprocessfile)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"setcompassoscillation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setcompassoscillation)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"iscollisionlighton", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (iscollisionlighton)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallmissioneventhandlers", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallmissioneventhandlers)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"ctrlvisible", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlvisible)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"formationtask", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (formationtask)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ismanualfire", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ismanualfire)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getpilotcamerarotation", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpilotcamerarotation)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"opendlcpage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (opendlcpage)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"wingsforcesrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (wingsforcesrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"setdefaultcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdefaultcamera)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"removefromremainscollector", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removefromremainscollector)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"playscriptedmission", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playscriptedmission)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbsetcolor", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetcolor)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"deletevehicle", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (deletevehicle)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"onteamswitch", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onteamswitch)." << std::endl; return std::make_shared<value>(); })); /* STRING,CODE */
	add(unary(L"lineintersects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lineintersects)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"isuavconnected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isuavconnected)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlposition)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbsize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsize)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbsize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsize)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getunitloadout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getunitloadout)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"getunitloadout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getunitloadout)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getunitloadout", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getunitloadout)." << std::endl; return std::make_shared<value>(); })); /* CONFIG */
	add(unary(L"roadat", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (roadat)." << std::endl; return std::make_shared<value>(); })); /* ARRAY,OBJECT */
	add(unary(L"createguardedpoint", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createguardedpoint)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"commitoverlay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commitoverlay)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"params", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (params)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"currentweapon", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentweapon)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"getdirvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdirvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlmapmouseover", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapmouseover)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"drawline3d", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (drawline3d)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"ctrlmapanimclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlmapanimclear)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"leaderboarddeinit", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (leaderboarddeinit)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"clearoverlay", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearoverlay)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"enginesrpmrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enginesrpmrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"datetonumber", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (datetonumber)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setsystemofunits", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setsystemofunits)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"breakto", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (breakto)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"difficultyenabled", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (difficultyenabled)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"clearmagazinecargoglobal", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearmagazinecargoglobal)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"synchronizedobjects", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (synchronizedobjects)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"tg", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tg)." << std::endl; return std::make_shared<value>(); })); /* SCALAR,NaN */
	add(unary(L"useaisteeringcomponent", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (useaisteeringcomponent)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"getdammage", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdammage)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"lbsetcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbsetcursel)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"setarmorypoints", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setarmorypoints)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"weightrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (weightrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"loadvest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadvest)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"gearidcammocount", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gearidcammocount)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"nearestlocationwithdubbing", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nearestlocationwithdubbing)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"createmine", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createmine)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"lnbsetpicturecolorright", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorright)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getmarkersize", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmarkersize)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"getposaslvisual", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getposaslvisual)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"eyepos", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (eyepos)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"removeallitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (removeallitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"createvehiclecrew", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (createvehiclecrew)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"uniformmagazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (uniformmagazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"enablecamshake", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enablecamshake)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"tvcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcursel)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"tvcursel", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tvcursel)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"setdetailmapblendpars", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (setdetailmapblendpars)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"onbriefingnotes", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (onbriefingnotes)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"markershape", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markershape)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"backpackitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (backpackitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"magazines", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazines)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"waypointcombatmode", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waypointcombatmode)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"enginesisonrtd", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enginesisonrtd)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"queryweaponpool", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (queryweaponpool)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"didjipowner", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (didjipowner)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"primaryweaponitems", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (primaryweaponitems)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"visiblepositionasl", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblepositionasl)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"set3denselected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (set3denselected)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"get3denselected", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denselected)." << std::endl; return std::make_shared<value>(); })); /* STRING */
	add(unary(L"lightison", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lightison)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"assignedcargo", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (assignedcargo)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"currentmagazine", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentmagazine)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"taskstate", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (taskstate)." << std::endl; return std::make_shared<value>(); })); /* TASK */
	add(unary(L"magazinesdetailvest", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (magazinesdetailvest)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"not", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (not)." << std::endl; return std::make_shared<value>(); })); /* BOOL */
	add(unary(L"lbclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbclear)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"lbclear", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lbclear)." << std::endl; return std::make_shared<value>(); })); /* SCALAR */
	add(unary(L"getpilotcameraposition", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getpilotcameraposition)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"forcerespawn", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcerespawn)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"titletext", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (titletext)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"getconnecteduav", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getconnecteduav)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"geteditorcamera", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (geteditorcamera)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"menusort", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (menusort)." << std::endl; return std::make_shared<value>(); })); /* ARRAY */
	add(unary(L"get3denentityid", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denentityid)." << std::endl; return std::make_shared<value>(); })); /* ANY */
	add(unary(L"lockeddriver", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lockeddriver)." << std::endl; return std::make_shared<value>(); })); /* OBJECT */
	add(unary(L"ctrlsetfocus", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ctrlsetfocus)." << std::endl; return std::make_shared<value>(); })); /* CONTROL */
	add(unary(L"unitaddons", type::ANY, L"", [](virtualmachine* vm, std::shared_ptr<value> r) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (unitaddons)." << std::endl; return std::make_shared<value>(); })); /* STRING */




	add(nular(L"safezonex", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezonex)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clearmagazinepool", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearmagazinepool)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"slingloadassistantshown", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (slingloadassistantshown)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"windstr", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (windstr)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isinstructorfigureenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isinstructorfigureenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"safezoney", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezoney)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getclientstatenumber", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getclientstatenumber)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getclientstate", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getclientstate)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"date", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (date)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getelevationoffset", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getelevationoffset)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"current3denoperation", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (current3denoperation)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getterraingrid", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getterraingrid)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"player", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (player)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"exit", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (exit)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"mapanimclear", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapanimclear)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"halt", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (halt)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"missiondifficulty", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (missiondifficulty)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"nextweatherchange", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (nextweatherchange)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allsites", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allsites)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"teamswitchenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teamswitchenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"visiblescoretable", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblescoretable)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"is3denmultiplayer", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (is3denmultiplayer)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"worldname", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (worldname)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"ismultiplayersolo", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ismultiplayersolo)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isremoteexecuted", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isremoteexecuted)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"curatorcamera", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorcamera)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"displaynull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (displaynull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_frameno", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_frameno)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"currentnamespace", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentnamespace)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"armorypoints", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (armorypoints)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"controlnull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (controlnull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"markasfinishedonsteam", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (markasfinishedonsteam)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"visiblewatch", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblewatch)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"estimatedendservertime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (estimatedendservertime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_activemissionfsms", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_activemissionfsms)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"hudmovementlevels", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hudmovementlevels)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"rainbow", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rainbow)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cansuspend", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cansuspend)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"servertime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servertime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"teams", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teams)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"all3denentities", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (all3denentities)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"librarycredits", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (librarycredits)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownwarrant", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownwarrant)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allmines", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allmines)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getshadowdistance", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getshadowdistance)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"alldisplays", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (alldisplays)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isautotest", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isautotest)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"viewdistance", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (viewdistance)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"sideambientlife", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sideambientlife)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allmapmarkers", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allmapmarkers)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"worldsize", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (worldsize)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"rain", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (rain)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"didjip", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (didjip)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"missionstart", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (missionstart)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"airdensitycurvertd", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (airdensitycurvertd)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"sunormoon", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (sunormoon)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"safezonewabs", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezonewabs)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"profilename", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (profilename)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"difficultyenabledrtd", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (difficultyenabledrtd)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"savegame", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (savegame)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"hasinterface", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hasinterface)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clearitempool", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearitempool)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"runinitscript", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (runinitscript)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getartillerycomputersettings", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getartillerycomputersettings)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"visiblemap", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblemap)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"forceweatherchange", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceweatherchange)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownchat", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownchat)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"mapanimdone", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapanimdone)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"resetcamshake", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (resetcamshake)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"showncompass", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showncompass)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"winddir", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (winddir)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"currentchannel", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (currentchannel)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"gettotaldlcusagetime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gettotaldlcusagetime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"get3denlinesvisible", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denlinesvisible)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"endloadingscreen", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (endloadingscreen)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"profilenamesteam", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (profilenamesteam)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"playableunits", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playableunits)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cheatsenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cheatsenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"opencuratorinterface", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (opencuratorinterface)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"gusts", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (gusts)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"overcastforecast", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (overcastforecast)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"commandingmenu", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (commandingmenu)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"distributionregion", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (distributionregion)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"windrtd", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (windrtd)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allcurators", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allcurators)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"benchmark", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (benchmark)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getmissiondlcs", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmissiondlcs)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"istuthintsenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (istuthintsenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownartillerycomputer", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownartillerycomputer)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"scriptnull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (scriptnull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isfilepatchingenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isfilepatchingenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"missionname", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (missionname)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clearweaponpool", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearweaponpool)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"issteammission", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (issteammission)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"linebreak", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (linebreak)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"language", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (language)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_fps", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_fps)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"acctime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (acctime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"enableenddialog", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (enableenddialog)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"safezoneh", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezoneh)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allunitsuav", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allunitsuav)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownradio", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownradio)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allplayers", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allplayers)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clearforcesrtd", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearforcesrtd)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clearradio", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clearradio)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"disabledebriefingstats", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disabledebriefingstats)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"logentities", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (logentities)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"visiblecompass", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblecompass)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"locationnull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (locationnull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownwatch", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownwatch)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"playerside", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playerside)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"lightnings", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (lightnings)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"simulweathersync", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (simulweathersync)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownmap", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownmap)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownpad", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownpad)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"clientowner", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (clientowner)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getobjectviewdistance", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getobjectviewdistance)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"overcast", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (overcast)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"safezonexabs", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezonexabs)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"forceend", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forceend)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_activesqfscripts", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_activesqfscripts)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"selectnoplayer", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (selectnoplayer)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getdlcassetsusage", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getdlcassetsusage)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_activesqsscripts", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_activesqsscripts)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"wind", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (wind)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"servername", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (servername)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"freelook", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (freelook)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"humidity", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (humidity)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"hcshownbar", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (hcshownbar)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"visiblegps", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (visiblegps)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownuavfeed", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownuavfeed)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"ismultiplayer", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (ismultiplayer)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isdedicated", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isdedicated)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"alldeadmen", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (alldeadmen)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_fpsmin", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_fpsmin)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"showncuratorcompass", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showncuratorcompass)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"finishmissioninit", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (finishmissioninit)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"fog", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fog)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"buldozer_isenabledroaddiag", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buldozer_isenabledroaddiag)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"userinputdisabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (userinputdisabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"loadgame", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (loadgame)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"forcedmap", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (forcedmap)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cameraview", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cameraview)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"moonintensity", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (moonintensity)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"dynamicsimulationenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dynamicsimulationenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isserver", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isserver)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"reversedmousey", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (reversedmousey)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"librarydisclaimers", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (librarydisclaimers)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getremotesensorsdisabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getremotesensorsdisabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"tasknull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (tasknull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"get3dencamera", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3dencamera)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cadetmode", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cadetmode)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cameraon", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cameraon)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allgroups", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allgroups)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"agents", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (agents)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"briefingname", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (briefingname)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownscoretable", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownscoretable)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"copyfromclipboard", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (copyfromclipboard)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cursorobject", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cursorobject)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"teamswitch", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teamswitch)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"diag_activescripts", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (diag_activescripts)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isstressdamageenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isstressdamageenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"fogparams", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fogparams)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"time", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (time)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"shownhud", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (shownhud)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"switchableunits", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (switchableunits)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"playerrespawntime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (playerrespawntime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"initambientlife", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (initambientlife)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allcutlayers", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allcutlayers)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"curatormouseover", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatormouseover)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"get3denmouseover", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3denmouseover)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"missionversion", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (missionversion)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"activatedaddons", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (activatedaddons)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"showngps", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (showngps)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"cursortarget", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (cursortarget)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"difficulty", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (difficulty)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"fogforecast", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (fogforecast)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"savejoysticks", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (savejoysticks)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"buldozer_reloadopermap", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (buldozer_reloadopermap)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getmissionlayers", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmissionlayers)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"is3den", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (is3den)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"dialog", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (dialog)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"systemofunits", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (systemofunits)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"radiovolume", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (radiovolume)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"savingenabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (savingenabled)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"particlesquality", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (particlesquality)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"mapanimcommit", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (mapanimcommit)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"vehicles", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (vehicles)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"curatorselected", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (curatorselected)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"musicvolume", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (musicvolume)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"waves", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (waves)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"disableserialization", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (disableserialization)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"daytime", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (daytime)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"teammembernull", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (teammembernull)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"soundvolume", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (soundvolume)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"alldead", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (alldead)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getresolution", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getresolution)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"timemultiplier", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (timemultiplier)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"safezonew", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (safezonew)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"allunits", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (allunits)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"getmouseposition", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (getmouseposition)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"get3deniconsvisible", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (get3deniconsvisible)." << std::endl; return std::make_shared<value>(); }));
	add(nular(L"isstreamfriendlyuienabled", L"", [](virtualmachine* vm) -> std::shared_ptr<value> { vm->err() << L"NOT IMPLEMENTED (isstreamfriendlyuienabled)." << std::endl; return std::make_shared<value>(); }));
}
