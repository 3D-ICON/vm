#include "full.h"

using namespace sqf;
void sqf::commandmap::initunimplemented(void)
{
	add(binary(4, L"lnbsetcurselrow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetcurselrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemenuitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"curatorcoef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (curatorcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getreldir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getreldir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menucollapse", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menucollapse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth6", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth6)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"configclasses", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (configclasses)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findemptyposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (findemptyposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointtype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointtype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordistance", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectordistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say3d", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (say3d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceflagtexture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forceflagtexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addvehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablereload", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablereload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"resize", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (resize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotlight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpilotlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvisibleiftreecollapsed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvisibleiftreecollapsed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeall", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isequaltypeall)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camconstuctionsetparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camconstuctionsetparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandsuppressivefire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandsuppressivefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvtext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchlight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (switchlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsettarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsettarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setanimspeedcoef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setanimspeedcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposaslw", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposaslw)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfocus", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetfocus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkershapelocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkershapelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontp", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontp)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfont", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfont)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowgetin", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowgetin)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth4b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth4b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskdescription", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletaskdescription)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendtaskresult", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sendtaskresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"directsay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (directsay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetforegroundcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetforegroundcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setforcegeneratorrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setforcegeneratorrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"worldtomodel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (worldtomodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethitindex", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sethitindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hideobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"get3denattribute", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (get3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofollow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dofollow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableconversation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disableconversation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetdive", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetdive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetselectcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetselectcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"apply", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (apply)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setweaponreloadingtime", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setweaponreloadingtime)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableai", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableai)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remotecontrol", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (remotecontrol)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmpeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmpeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"actionparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (actionparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfromeditor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfromeditor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectweaponturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuurl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuurl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getfriend", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getfriend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteeditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deleteeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"registertask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (registertask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"pushbackunique", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (pushbackunique)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizeobjectsadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (synchronizeobjectsadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disabletiequipment", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disabletiequipment)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlerandom", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setparticlerandom)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetsquery", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (targetsquery)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselectcolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatepylon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animatepylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableuavwaypoints", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableuavwaypoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distancesqr", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (distancesqr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeaker", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setspeaker)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammoonpylon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setammoonpylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcustomweightrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcustomweightrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isuavconnectable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isuavconnectable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (playaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetangle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletasktype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletasktype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerattachobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (triggerattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animationsourcephase", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animationsourcephase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadmagazine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (loadmagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadstatus", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (loadstatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removempeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removempeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightbrightness", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightbrightness)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"swimindepth", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (swimindepth)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"attachobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (attachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addrating", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addrating)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearobjectsready", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearobjectsready)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"controlsgroupctrl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (controlsgroupctrl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolorshade", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolorshade)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"saveidentity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (saveidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablestamina", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablestamina)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerbrushlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerbrushlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeownedmine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeownedmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitability", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtouniform", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additemtouniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"htmlload", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (htmlload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereceiveremotetargets", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclereceiveremotetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableweapondisassembly", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableweapondisassembly)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasgunner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignasgunner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitrecoilcoefficient", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitrecoilcoefficient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuchecked", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethitpointdamage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sethitpointdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allow3dmode", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allow3dmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"limitspeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (limitspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadoverlay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (loadoverlay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreload", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfrombackpack", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeitemfrombackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectcommit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ppeffectcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"updatedrawicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (updatedrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwinddir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwinddir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlremovealleventhandlers", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlremovealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignascargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleid", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicleid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertypelocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkertypelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (groupradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetrange", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (slidersetrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsettext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfog", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfog)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectorup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvectorup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunittrait", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunittrait)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcewalk", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forcewalk)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweaponcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponcargoglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweaponcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightintensity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightintensity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"customradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (customradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentmagazinedetailturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (currentmagazinedetailturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settitleeffect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settitleeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsettextright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsettextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfollow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandfollow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowfileoperations", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowfileoperations)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"param", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (param)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolordisabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcurrentwaypoint", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcurrentwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfromuniform", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeitemfromuniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormodeltoworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectormodeltoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightnings", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightnings)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsortbyvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsortbyvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpylonloadout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpylonloadout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeprimaryweaponitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeprimaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selecteditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selecteditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectarguments", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjectarguments)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagtexture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setflagtexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitemfromvest", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeitemfromvest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethitindex", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (gethitindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcefollowroad", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forcefollowroad)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addplayerscores", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addplayerscores)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatediarysubject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (creatediarysubject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinstring", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (joinstring)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"knowsabout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (knowsabout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"in", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (in)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendtask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sendtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorselectedright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselectedright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablepersonturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablepersonturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointscript", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointscript)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playmove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (playmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentweaponturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (currentweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ammoonpylon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ammoonpylon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontpb", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontpb)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockcamerato", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockcamerato)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutfadeout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cutfadeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeallmpeventhandlers", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeallmpeventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inpolygon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inpolygon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsettext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denobjecttype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set3denobjecttype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerdynamicsimulation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (triggerdynamicsimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertextlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkertextlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazinecargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazinecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazinecargoglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazinecargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"minedetectedby", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (minedetectedby)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbtext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isvehiclesensorenabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isvehiclesensorenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetbackgroundcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetbackgroundcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtobackpack", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canadditemtobackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposasl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposasl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"reveal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (reveal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettooltip", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vehicleradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vehicleradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"show3dicons", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (show3dicons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetdisabledcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetdisabledcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablevehiclecargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablevehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"get3denmissionattribute", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (get3denmissionattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isflashlighton", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isflashlighton)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execfsm", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (execfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcollisionlight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcollisionlight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectordir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvectordir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectmaterialglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjectmaterialglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdropinterval", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdropinterval)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolortext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolortext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbtext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchmove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (switchmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additemcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"neartargets", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (neartargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addgoggles", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addgoggles)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowcuratorlogicignoreareas", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowcuratorlogicignoreareas)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascommander", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignascommander)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showwaypoint", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (showwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getdir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettextright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsettextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlremoveeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlremoveeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disablenvgequipment", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disablenvgequipment)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetknowledge", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (targetknowledge)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbdelete", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbdelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefov", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparefov)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"newoverlay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (newoverlay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"respawnvehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (respawnvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfov", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetfov)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutobj", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cutobj)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskalwaysvisible", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletaskalwaysvisible)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretunit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (turretunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbaddtopic", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbaddtopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformationtask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setformationtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparebank", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparebank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcurrenttask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcurrenttask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cbsetchecked", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cbsetchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsort", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setuseractiontext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setuseractiontext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsuppression", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsuppression)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkertext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponsturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (weaponsturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitems", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeitems)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelsetcallsign", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (radiochannelsetcallsign)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetchecked", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupid", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgroupid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveto", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvexpand", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvexpand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorworldtomodelvisual", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectorworldtomodelvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveinturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveinturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbadddatabase", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbadddatabase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"infopanelcomponentenabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (infopanelcomponentenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"create3denentity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (create3denentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolorselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteresources", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deleteresources)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"try", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (try)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ropedetach", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ropedetach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablesimulationglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablesimulationglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth1b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth1b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwantedrpmrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwantedrpmrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvcount", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvcount)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unregistertask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (unregistertask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcreate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camcreate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (say)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetscale", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetscale)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectenable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ppeffectenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"intersect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (intersect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removehandgunitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removehandgunitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dofire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"catch", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (catch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denattribute", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdebriefingtext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdebriefingtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfade", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfade)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcgroupparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hcgroupparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sideradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sideradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countenemy", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (countenemy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"progresssetposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (progresssetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdammage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdammage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveinany", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveinany)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdeletecolumn", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbdeletecolumn)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayaddeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (displayaddeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltip", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setshotparents", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setshotparents)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldvisual", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (modeltoworldvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setattributes", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setattributes)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getgroupicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvdelete", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvdelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth5b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth5b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableaifeature", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableaifeature)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmenuitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablesimulation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablesimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowdamage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execvm", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (execvm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointhouseposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointhouseposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfriend", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfriend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoreditingarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addcuratoreditingarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"attachto", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (attachto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cutrsc", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cutrsc)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcaptive", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcaptive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"editorseteventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (editorseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelsetlabel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (radiochannelsetlabel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockedcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockedcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (turretlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupidglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgroupidglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbtell", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbtell)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setidentity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuenabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuenabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"doorphase", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (doorphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lookat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lookat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectleader", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectleader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"backpackspacefor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (backpackspacefor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatesource", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animatesource)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitloadout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitloadout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoraddons", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removecuratoraddons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playgesture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (playgesture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparetarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparetarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetheadertemplate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctsetheadertemplate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereportownposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclereportownposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerdirlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerdirlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animationphase", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animationphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remoteexec", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (remoteexec)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeweaponglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createsite", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createsite)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrainbow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrainbow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfatigue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfatigue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdamage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countside", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (countside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctfindrowheader", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctfindrowheader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticleparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setparticleparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawrectangle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawrectangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbaddrow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbaddrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolorselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawline", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawline)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"posscreentoworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (posscreentoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethidebehind", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sethidebehind)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"turretowner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (turretowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setface", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setface)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fadesound", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (fadesound)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"splitstring", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (splitstring)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"count", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (count)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointformation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableuavconnectability", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disableuavconnectability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearroads", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearroads)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayctrl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (displayctrl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreach", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (foreach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denmissionattribute", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set3denmissionattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformdir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setformdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontsecondary", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommitprepared", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camcommitprepared)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setnamesound", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setnamesound)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldvisualworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (modeltoworldvisualworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"doartilleryfire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (doartilleryfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isuniformallowed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isuniformallowed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"skill", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (skill)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatediaryrecord", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (creatediaryrecord)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweapon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"waypointattachvehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (waypointattachvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockwp", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockwp)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineammocargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazineammocargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayseteventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (displayseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazineglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazineglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitposweak", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitposweak)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettextcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addlivestats", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addlivestats)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceadduniform", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forceadduniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canvehiclecargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canvehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorworldtomodel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectorworldtomodel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrandomlip", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrandomlip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwppos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwppos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findeditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (findeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addforce", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addforce)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockedturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockedturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapcursor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlmapcursor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawlink", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawlink)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratorpoints", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addcuratorpoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignasturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sendsimplecommand", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sendsimplecommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsort", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoreditingarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removecuratoreditingarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointspeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createunit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdynamicsimulationdistance", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdynamicsimulationdistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorcameraareaceiling", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcuratorcameraareaceiling)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addtorque", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addtorque)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"onmapsingleclick", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (onmapsingleclick)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmass", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbadddatabasetargets", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbadddatabasetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"posworldtoscreen", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (posworldtoscreen)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectionposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectionposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"updatemenuitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (updatemenuitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweaponturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwindforce", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwindforce)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getfsmvariable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getfsmvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addresources", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addresources)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskcustomdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletaskcustomdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectoradd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectoradd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawpolygon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawpolygon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menushortcut", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menushortcut)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetrelpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetrelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlcreate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlcreate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"useaudiotimeformoves", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (useaudiotimeformoves)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addscore", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addscore)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablevehiclesensor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablevehiclesensor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assigncurator", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assigncurator)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buildingexit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (buildingexit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfuel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfuel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectadjust", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ppeffectadjust)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"magazineturretammo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (magazineturretammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nmenuitems", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nmenuitems)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"preloadobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (preloadobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodeldirandup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodeldirandup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointcombatmode", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointcombatmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"flyinheightasl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (flyinheightasl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"creatempcampaigndisplay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (creatempcampaigndisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enabledynamicsimulation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enabledynamicsimulation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposatl", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposatl)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdrawicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"globalradio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (globalradio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteditormode", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (seteditormode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvtooltip", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvtooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordistancesqr", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectordistancesqr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sidechat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sidechat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableuavconnectability", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableuavconnectability)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweaponglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlcommit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlcommit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearestobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearestobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightdaylight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightdaylight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lightattachobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lightattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcenterofmass", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcenterofmass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcsetgroup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hcsetgroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkercolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkercolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setairportside", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setairportside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitrank", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitrank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L":", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (:)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjecttextureglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjecttextureglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getrelpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getrelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletasktarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletasktarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizewaypoint", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (synchronizewaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsettext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsettext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"append", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (append)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbdeleterow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbdeleterow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"throw", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (throw)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearsupplies", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearsupplies)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"copywaypoints", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (copywaypoints)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setleader", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setleader)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unitsbelowheight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (unitsbelowheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disableai", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disableai)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdirection", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"servercommand", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (servercommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertimeout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggertimeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbisselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbisselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparedir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparedir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetdata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetdata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetdir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setposasl2", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setposasl2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetbank", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetbank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"action", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (action)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"spawn", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (spawn)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazineturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectweapon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createtask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createtask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addeditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addeditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableinfopanelcomponent", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableinfopanelcomponent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"linkitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (linkitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteditorobjectscope", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (seteditorobjectscope)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturecolordisabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturecolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showlegend", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (showlegend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectproxy", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjectproxy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkersizelocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkersizelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ordergetin", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ordergetin)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctremoverows", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctremoverows)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getunittrait", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getunittrait)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcremovegroup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hcremovegroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"arrayintersect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (arrayintersect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusize", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvariable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"issensortargetconfirmed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (issensortargetconfirmed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setusermfdvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setusermfdvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getsoundcontroller", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getsoundcontroller)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablemimics", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablemimics)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth2b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth2b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcustomaimcoef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcustomaimcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setairplanethrottle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setairplanethrottle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"find", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (find)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsize", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunitpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunitpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatedoor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animatedoor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isequaltypeparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctfindheaderrows", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctfindheaderrows)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (gethit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawarrow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawarrow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicleposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlshow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlshow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazineglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemagazineglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightflaremaxdistance", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightflaremaxdistance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playmovenow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (playmovenow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"domove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (domove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forcespeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forcespeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturerightcolordisabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturerightcolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerbrush", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerbrush)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocitytransformation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvelocitytransformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablecollisionwith", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablecollisionwith)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayremoveeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (displayremoveeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmagazines", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkertype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deletegroupwhenempty", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deletegroupwhenempty)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isflatempty", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isflatempty)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetstructuredtext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetstructuredtext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addteammember", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addteammember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"revealmine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (revealmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"reportremotetarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (reportremotetarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmusiceffect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmusiceffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchgesture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (switchgesture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setformation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setformation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorcos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectorcos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandwatch", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandwatch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targets", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (targets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratorcameraarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addcuratorcameraarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth6b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth6b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerposlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerposlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcamerarotation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpilotcamerarotation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (fire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setautonomous", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setautonomous)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getsoundcontrollerresult", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getsoundcontrollerresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclevarname", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclevarname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hasweapon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hasweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextsecondary", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettextsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicletipars", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicletipars)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagside", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setflagside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrowcontrols", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrowcontrols)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeedmode", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setspeedmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"waypointattachobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (waypointattachobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinsilent", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (joinsilent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsortbyvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsortbyvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkerdir", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkerdir)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deletevehiclecrew", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deletevehiclecrew)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrollrewind", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrollrewind)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buildingpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (buildingpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointstatements", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointstatements)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointforcebehaviour", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointforcebehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmimic", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmimic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"engineon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (engineon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwindstr", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwindstr)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbtextright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbtextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowsprint", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowsprint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtobackpack", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additemtobackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrollspeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrollspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideselection", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hideselection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(3, L">>", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (>>)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removedrawlinks", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removedrawlinks)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointcompletionradius", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointcompletionradius)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupiconparams", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgroupiconparams)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbcolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratoreditingareatype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcuratoreditingareatype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"confirmsensortarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (confirmsensortarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getvariable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forceweaponfire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forceweaponfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightambient", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightambient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removesimpletask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removesimpletask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdestination", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdestination)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"pushback", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (pushback)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menupicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menupicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlenable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupchat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (groupchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrain", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrain)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"add3denlayer", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (add3denlayer)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getspeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addweaponitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cuttext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cuttext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskstate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settaskstate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"triggerattachvehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (triggerattachvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcamuseti", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcamuseti)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoraddons", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addcuratoraddons)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addbackpackcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"join", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (join)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"glanceat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (glanceat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"displayremovealleventhandlers", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (displayremovealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapscreentoworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlmapscreentoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointname", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"counttype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (counttype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveobjecttoend", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveobjecttoend)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazinesturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemagazinesturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrectangular", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrectangular)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuenable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuenable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctheadercontrols", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctheadercontrols)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"suppressfor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (suppressfor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettextcolorsecondary", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettextcolorsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inserteditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inserteditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denlogictype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set3denlogictype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdynamicsimulationdistancecoef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdynamicsimulationdistancecoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fadespeech", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (fadespeech)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpylonspriority", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpylonspriority)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"closedisplay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (closedisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskresult", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settaskresult)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightuseflare", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightuseflare)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvelocity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"breakout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (breakout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypeany", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isequaltypeany)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawtriangle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawtriangle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetselectcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetselectcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"mapcenteroncamera", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (mapcenteroncamera)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setammocargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setammocargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackcargoglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addbackpackcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distance2d", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (distance2d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createsimpletask", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createsimpletask)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandfsm", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcamerainterest", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcamerainterest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (switchaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorwaypointcost", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcuratorwaypointcost)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"diarysubjectexists", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (diarysubjectexists)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectrandomweighted", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectrandomweighted)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setslingload", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setslingload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"random", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (random)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlchecked", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlchecked)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsettooltip", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsettooltip)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfaceanimation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfaceanimation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflaganimationphase", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setflaganimationphase)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addhandgunitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addhandgunitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointloiterradius", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointloiterradius)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpipeffect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpipeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"playactionnow", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (playactionnow)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weapondirection", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (weapondirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetautoscrolldelay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetautoscrolldelay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countunknown", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (countunknown)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapworldtoscreen", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlmapworldtoscreen)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ropeattachto", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ropeattachto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addpublicvariableeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addpublicvariableeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tofixed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tofixed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetactivecolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetactivecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveincargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveincargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtouniform", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canadditemtouniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbleedingremaining", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setbleedingremaining)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightflaresize", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightflaresize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removemagazines", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removemagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormodeltoworldvisual", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectormodeltoworldvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"distance", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (distance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"execeditorscript", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (execeditorscript)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticleclass", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setparticleclass)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlecircle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setparticlecircle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmember", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (foreachmember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvelocitymodelspace", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvelocitymodelspace)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"animatebay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (animatebay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findcover", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (findcover)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorfromto", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectorfromto)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth1", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth1)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsettooltipcolorbox", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsettooltipcolorbox)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawlocation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawlocation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointdescription", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointdescription)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemcargoglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additemcargoglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochannelremove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (radiochannelremove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removedrawicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removedrawicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setlightattenuation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setlightattenuation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth2", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setname", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setname)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addgroupicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuexpand", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuexpand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ppeffectforceinnvg", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ppeffectforceinnvg)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupowner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgroupowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"exitwith", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (exitwith)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclearmor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclearmor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addmenu", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addmenu)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"savestatus", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (savestatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectormultiply", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectormultiply)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlmapanimadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlmapanimadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setstamina", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setstamina)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth3", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth3)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaves", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaves)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetposition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (slidersetposition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparerelpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparerelpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setconvoyseparation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setconvoyseparation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablefatigue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablefatigue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveindriver", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveindriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"selectdiarysubject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (selectdiarysubject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canslingload", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canslingload)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sort", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createmissiondisplay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createmissiondisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfuelcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfuelcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dotarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dotarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addvest", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addvest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"remoteexeccall", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (remoteexeccall)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth4", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth4)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbreact", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbreact)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordiff", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectordiff)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"land", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (land)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablegunlights", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablegunlights)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setowner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth5", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth5)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpictureright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpictureright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctremoveheaders", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctremoveheaders)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"switchcamera", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (switchcamera)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunloadincombat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunloadincombat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"skillfinal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (skillfinal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"loadidentity", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (loadidentity)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addsecondaryweaponitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addsecondaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth6", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth6)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratorcameraarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removecuratorcameraarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeteammember", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeteammember)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"buttonsetaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (buttonsetaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menudelete", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menudelete)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinassilent", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (joinassilent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworldworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (modeltoworldworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbcolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvcollapse", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvcollapse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inflame", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inflame)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolumnspos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetcolumnspos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"say2d", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (say2d)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandchat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hintc", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hintc)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetcursel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointvisible", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointvisible)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearobjects", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectorcrossproduct", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectorcrossproduct)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hideobjectglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hideobjectglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsimpletaskdestination", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsimpletaskdestination)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandartilleryfire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandartilleryfire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleradar", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicleradar)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dosuppressivefire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dosuppressivefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignteam", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignteam)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"callextension", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (callextension)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbhastopic", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbhastopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menutext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menutext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbaddcolumn", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbaddcolumn)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggeractivation", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggeractivation)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"additemtovest", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (additemtovest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"adduniform", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (adduniform)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"globalchat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (globalchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menushortcuttext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menushortcuttext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfonth3b", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfonth3b)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"stop", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (stop)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleammo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicleammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcombatmode", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcombatmode)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjecttexture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjecttexture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assigntoairport", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assigntoairport)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableattack", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableattack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createmenu", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createmenu)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"debugfsm", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (debugfsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetfovrange", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetfovrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizeobjectsremove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (synchronizeobjectsremove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menudata", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menudata)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"modeltoworld", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (modeltoworld)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"checkvisibility", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (checkvisibility)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbremovetopic", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbremovetopic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggerarea", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggerarea)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparedive", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparedive)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointtimeout", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointtimeout)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableaimprecision", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableaimprecision)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignascargoindex", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignascargoindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"emptypositions", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (emptypositions)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createvehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createvehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandmove", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandmove)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ammo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetrowtemplate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctsetrowtemplate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowfleeing", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowfleeing)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setflagowner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setflagowner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"targetsaggregate", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (targetsaggregate)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethitpointdamage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (gethitpointdamage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"leavevehicle", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (leavevehicle)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unassignitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (unassignitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setspeech", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setspeech)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addheadgear", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addheadgear)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfeaturetype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfeaturetype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"set3denlayer", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (set3denlayer)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvectordirandup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvectordirandup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"commandtarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (commandtarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"flyinheight", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (flyinheight)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setside", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lockdriver", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lockdriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addwaypoint", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addwaypoint)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggertext", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggertext)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"synchronizetrigger", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (synchronizetrigger)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vectordotproduct", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vectordotproduct)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectargument", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getobjectargument)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"sethit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (sethit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolorselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"exec", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (exec)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setovercast", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setovercast)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleteat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deleteat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getcargoindex", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getcargoindex)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setradiomsg", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setradiomsg)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclereportremotetargets", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclereportremotetargets)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetaction", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusetaction)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setsoundeffect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setsoundeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"objstatus", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (objstatus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"geteditorobjectscope", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (geteditorobjectscope)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"customchat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (customchat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"move", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (move)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrotorbrakertd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrotorbrakertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctsetcursel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inrangeofartillery", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inrangeofartillery)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"listobjects", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (listobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"connectterminaltouav", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (connectterminaltouav)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwingforcescalertd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwingforcescalertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"deleterange", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (deleterange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrladdeventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrladdeventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setparticlefire", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setparticlefire)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetpicturecolorselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setskill", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setskill)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeweaponcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"unlinkitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (unlinkitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"currentmagazineturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (currentmagazineturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"forgettarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (forgettarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbrakesrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setbrakesrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"worldtomodelvisual", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (worldtomodelvisual)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"faderadio", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (faderadio)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setoxygenremaining", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setoxygenremaining)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"iskindof", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (iskindof)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectchildren", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getobjectchildren)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setimportance", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setimportance)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"countfriendly", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (countfriendly)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camcommand", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camcommand)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removegroupicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removegroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"publicvariableclient", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (publicvariableclient)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"vehiclechat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (vehiclechat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"radiochanneladd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (radiochanneladd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetmodelscale", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetmodelscale)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"do", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (do)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findemptypositionready", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (findemptypositionready)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableautotrimrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableautotrimrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"assignasdriver", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (assignasdriver)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablecopilot", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablecopilot)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menuadd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menuadd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"landat", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (landat)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"onshownewobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (onshownewobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointloitertype", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointloitertype)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowcrewinimmobile", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowcrewinimmobile)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkercolorlocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkercolorlocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settriggerstatements", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settriggerstatements)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgusts", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgusts)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrank", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrank)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkershape", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkershape)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"clear3denattribute", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (clear3denattribute)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableirlasers", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableirlasers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enablechannel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enablechannel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getenvsoundcontroller", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getenvsoundcontroller)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbtextright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbtextright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"canadditemtovest", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (canadditemtovest)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addscoreside", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addscoreside)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableropeattach", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableropeattach)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehicleammodef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehicleammodef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"enableautostartuprtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (enableautostartuprtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmagazineturretammo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmagazineturretammo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"gethidefrom", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (gethidefrom)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ondoubleclick", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ondoubleclick)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweaponattachmentcargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeweaponattachmentcargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setrepaircargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setrepaircargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setunconscious", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setunconscious)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setgroupicon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setgroupicon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setwaypointbehaviour", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setwaypointbehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"slidersetspeed", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (slidersetspeed)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"inareaarray", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (inareaarray)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createdisplay", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createdisplay)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbvalue", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbvalue)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvpicture", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvpicture)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setcuratorcoef", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setcuratorcoef)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorselected", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorselected)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addcuratoreditableobjects", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addcuratoreditableobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"infopanelcomponents", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (infopanelcomponents)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpackglobal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addbackpackglobal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"kbwassaid", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (kbwassaid)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getcompatiblepylonmagazines", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getcompatiblepylonmagazines)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"evalobjectargument", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (evalobjectargument)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"hcselectgroup", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (hcselectgroup)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusetcheck", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusetcheck)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removecuratoreditableobjects", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removecuratoreditableobjects)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"createvehiclelocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (createvehiclelocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetcolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addbackpack", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addbackpack)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheightsecondary", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheightsecondary)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setfsmvariable", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setfsmvariable)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefovrange", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparefovrange)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveincommander", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveincommander)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"groupselectunit", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (groupselectunit)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmemberagent", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (foreachmemberagent)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetcolor", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetcolor)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fireattarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (fireattarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlseteventhandler", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlseteventhandler)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setdriveonpath", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setdriveonpath)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setenginerpmrtd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setenginerpmrtd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"foreachmemberteam", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (foreachmemberteam)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addownedmine", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addownedmine)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"showneweditorobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (showneweditorobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"params", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (params)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"cameraeffect", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (cameraeffect)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclecargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclecargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getartilleryeta", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getartilleryeta)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lookatpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lookatpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dofsm", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dofsm)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setobjectmaterial", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setobjectmaterial)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"fademusic", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (fademusic)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removealleventhandlers", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removealleventhandlers)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"camsetpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (camsetpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"joinas", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (joinas)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"moveingunner", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (moveingunner)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparepos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparepos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkeralphalocal", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkeralphalocal)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"disablecollisionwith", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (disablecollisionwith)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isequaltypearray", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isequaltypearray)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setvehiclelock", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setvehiclelock)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"addprimaryweaponitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (addprimaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lbsetcursel", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lbsetcursel)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"seteffectcondition", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (seteffectcondition)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"aimedattarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (aimedattarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"drawellipse", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (drawellipse)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setactualcollectivertd", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setactualcollectivertd)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpos", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpos)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"editobject", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (editobject)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lnbsetpicturecolorright", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lnbsetpicturecolorright)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"allowdammage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (allowdammage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setbehaviour", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setbehaviour)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"findnearestenemy", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (findnearestenemy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"dowatch", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (dowatch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"isirlaseron", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (isirlaseron)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth1", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth1)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkersize", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkersize)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"nearentities", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (nearentities)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"tvsetpicturerightcolordisabled", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (tvsetpicturerightcolordisabled)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"lock", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (lock)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponaccessories", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (weaponaccessories)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"magazinesturret", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (magazinesturret)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth2", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth2)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"campreparefocus", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (campreparefocus)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpitch", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpitch)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setmarkeralpha", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setmarkeralpha)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"getobjectproxy", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (getobjectproxy)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settaskmarkeroffset", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settaskmarkeroffset)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcameradirection", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpilotcameradirection)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth3", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth3)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"settargetage", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (settargetage)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"setpilotcameratarget", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (setpilotcameratarget)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removesecondaryweaponitem", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removesecondaryweaponitem)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"weaponaccessoriescargo", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (weaponaccessoriescargo)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"removeweapon", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (removeweapon)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth4", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth4)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"menusort", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (menusort)." << std::endl; return std::make_shared<value>(); }));
	add(binary(4, L"ctrlsetfontheighth5", type::ANY, type::ANY, L"", [](const virtualmachine* vm, value_s l, value_s r) -> value_s { vm->err() << L"NOT IMPLEMENTED (ctrlsetfontheighth5)." << std::endl; return std::make_shared<value>(); }));
}
